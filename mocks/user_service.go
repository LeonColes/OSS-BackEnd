// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"
	dto "oss-backend/internal/model/dto"
	entity "oss-backend/internal/model/entity"

	mock "github.com/stretchr/testify/mock"
)

// UserService is an autogenerated mock type for the UserService type
type UserService struct {
	mock.Mock
}

// AssignRoles provides a mock function with given fields: ctx, userID, roleIDs
func (_m *UserService) AssignRoles(ctx context.Context, userID string, roleIDs []uint) error {
	ret := _m.Called(ctx, userID, roleIDs)

	if len(ret) == 0 {
		panic("no return value specified for AssignRoles")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []uint) error); ok {
		r0 = rf(ctx, userID, roleIDs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetUserInfo provides a mock function with given fields: ctx, id
func (_m *UserService) GetUserInfo(ctx context.Context, id string) (*dto.UserResponse, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetUserInfo")
	}

	var r0 *dto.UserResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*dto.UserResponse, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *dto.UserResponse); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.UserResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserRoles provides a mock function with given fields: ctx, userID
func (_m *UserService) GetUserRoles(ctx context.Context, userID string) ([]entity.Role, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserRoles")
	}

	var r0 []entity.Role
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]entity.Role, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []entity.Role); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Role)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InitAdminUser provides a mock function with given fields: ctx
func (_m *UserService) InitAdminUser(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for InitAdminUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListUsers provides a mock function with given fields: ctx, req
func (_m *UserService) ListUsers(ctx context.Context, req *dto.UserListRequest) (*dto.UserListResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for ListUsers")
	}

	var r0 *dto.UserListResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.UserListRequest) (*dto.UserListResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dto.UserListRequest) *dto.UserListResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.UserListResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dto.UserListRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Login provides a mock function with given fields: ctx, req, ip
func (_m *UserService) Login(ctx context.Context, req *dto.UserLoginRequest, ip string) (*dto.LoginResponse, error) {
	ret := _m.Called(ctx, req, ip)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 *dto.LoginResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.UserLoginRequest, string) (*dto.LoginResponse, error)); ok {
		return rf(ctx, req, ip)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dto.UserLoginRequest, string) *dto.LoginResponse); ok {
		r0 = rf(ctx, req, ip)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.LoginResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dto.UserLoginRequest, string) error); ok {
		r1 = rf(ctx, req, ip)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Register provides a mock function with given fields: ctx, req
func (_m *UserService) Register(ctx context.Context, req *dto.UserRegisterRequest) (*dto.UserResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 *dto.UserResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.UserRegisterRequest) (*dto.UserResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dto.UserRegisterRequest) *dto.UserResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.UserResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dto.UserRegisterRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveRoles provides a mock function with given fields: ctx, userID, roleIDs
func (_m *UserService) RemoveRoles(ctx context.Context, userID string, roleIDs []uint) error {
	ret := _m.Called(ctx, userID, roleIDs)

	if len(ret) == 0 {
		panic("no return value specified for RemoveRoles")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []uint) error); ok {
		r0 = rf(ctx, userID, roleIDs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdatePassword provides a mock function with given fields: ctx, id, req
func (_m *UserService) UpdatePassword(ctx context.Context, id string, req *dto.UserPasswordUpdateRequest) error {
	ret := _m.Called(ctx, id, req)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePassword")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *dto.UserPasswordUpdateRequest) error); ok {
		r0 = rf(ctx, id, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateUserInfo provides a mock function with given fields: ctx, id, req
func (_m *UserService) UpdateUserInfo(ctx context.Context, id string, req *dto.UserUpdateRequest) error {
	ret := _m.Called(ctx, id, req)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserInfo")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *dto.UserUpdateRequest) error); ok {
		r0 = rf(ctx, id, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateUserStatus provides a mock function with given fields: ctx, id, status
func (_m *UserService) UpdateUserStatus(ctx context.Context, id string, status int) error {
	ret := _m.Called(ctx, id, status)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int) error); ok {
		r0 = rf(ctx, id, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewUserService creates a new instance of UserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserService(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserService {
	mock := &UserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
