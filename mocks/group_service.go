// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"
	dto "oss-backend/internal/model/dto"

	mock "github.com/stretchr/testify/mock"
)

// GroupService is an autogenerated mock type for the GroupService type
type GroupService struct {
	mock.Mock
}

// AddMember provides a mock function with given fields: ctx, groupID, userID, role, operatorID
func (_m *GroupService) AddMember(ctx context.Context, groupID string, userID string, role string, operatorID string) error {
	ret := _m.Called(ctx, groupID, userID, role, operatorID)

	if len(ret) == 0 {
		panic("no return value specified for AddMember")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) error); ok {
		r0 = rf(ctx, groupID, userID, role, operatorID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CheckUserGroupRole provides a mock function with given fields: ctx, groupID, userID
func (_m *GroupService) CheckUserGroupRole(ctx context.Context, groupID string, userID string) (string, error) {
	ret := _m.Called(ctx, groupID, userID)

	if len(ret) == 0 {
		panic("no return value specified for CheckUserGroupRole")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (string, error)); ok {
		return rf(ctx, groupID, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) string); ok {
		r0 = rf(ctx, groupID, userID)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, groupID, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateGroup provides a mock function with given fields: ctx, req, creatorID
func (_m *GroupService) CreateGroup(ctx context.Context, req *dto.GroupCreateRequest, creatorID string) error {
	ret := _m.Called(ctx, req, creatorID)

	if len(ret) == 0 {
		panic("no return value specified for CreateGroup")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.GroupCreateRequest, string) error); ok {
		r0 = rf(ctx, req, creatorID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GenerateInviteCode provides a mock function with given fields: ctx, req, userID
func (_m *GroupService) GenerateInviteCode(ctx context.Context, req *dto.GroupInviteRequest, userID string) (*dto.GroupInviteResponse, error) {
	ret := _m.Called(ctx, req, userID)

	if len(ret) == 0 {
		panic("no return value specified for GenerateInviteCode")
	}

	var r0 *dto.GroupInviteResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.GroupInviteRequest, string) (*dto.GroupInviteResponse, error)); ok {
		return rf(ctx, req, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dto.GroupInviteRequest, string) *dto.GroupInviteResponse); ok {
		r0 = rf(ctx, req, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.GroupInviteResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dto.GroupInviteRequest, string) error); ok {
		r1 = rf(ctx, req, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGroupByID provides a mock function with given fields: ctx, id, userID
func (_m *GroupService) GetGroupByID(ctx context.Context, id string, userID string) (*dto.GroupResponse, error) {
	ret := _m.Called(ctx, id, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetGroupByID")
	}

	var r0 *dto.GroupResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*dto.GroupResponse, error)); ok {
		return rf(ctx, id, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *dto.GroupResponse); ok {
		r0 = rf(ctx, id, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.GroupResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, id, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserGroups provides a mock function with given fields: ctx, userID
func (_m *GroupService) GetUserGroups(ctx context.Context, userID string) ([]dto.GroupResponse, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserGroups")
	}

	var r0 []dto.GroupResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]dto.GroupResponse, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []dto.GroupResponse); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.GroupResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// JoinGroup provides a mock function with given fields: ctx, req, userID
func (_m *GroupService) JoinGroup(ctx context.Context, req *dto.GroupJoinRequest, userID string) error {
	ret := _m.Called(ctx, req, userID)

	if len(ret) == 0 {
		panic("no return value specified for JoinGroup")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.GroupJoinRequest, string) error); ok {
		r0 = rf(ctx, req, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListGroups provides a mock function with given fields: ctx, req, userID
func (_m *GroupService) ListGroups(ctx context.Context, req *dto.GroupListRequest, userID string) (*dto.GroupListResponse, error) {
	ret := _m.Called(ctx, req, userID)

	if len(ret) == 0 {
		panic("no return value specified for ListGroups")
	}

	var r0 *dto.GroupListResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.GroupListRequest, string) (*dto.GroupListResponse, error)); ok {
		return rf(ctx, req, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dto.GroupListRequest, string) *dto.GroupListResponse); ok {
		r0 = rf(ctx, req, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.GroupListResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dto.GroupListRequest, string) error); ok {
		r1 = rf(ctx, req, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListMembers provides a mock function with given fields: ctx, groupID, page, size
func (_m *GroupService) ListMembers(ctx context.Context, groupID string, page int, size int) (*dto.GroupMemberListResponse, error) {
	ret := _m.Called(ctx, groupID, page, size)

	if len(ret) == 0 {
		panic("no return value specified for ListMembers")
	}

	var r0 *dto.GroupMemberListResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) (*dto.GroupMemberListResponse, error)); ok {
		return rf(ctx, groupID, page, size)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) *dto.GroupMemberListResponse); ok {
		r0 = rf(ctx, groupID, page, size)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.GroupMemberListResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int, int) error); ok {
		r1 = rf(ctx, groupID, page, size)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveMember provides a mock function with given fields: ctx, groupID, userID, operatorID
func (_m *GroupService) RemoveMember(ctx context.Context, groupID string, userID string, operatorID string) error {
	ret := _m.Called(ctx, groupID, userID, operatorID)

	if len(ret) == 0 {
		panic("no return value specified for RemoveMember")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, groupID, userID, operatorID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateGroup provides a mock function with given fields: ctx, req, updaterID
func (_m *GroupService) UpdateGroup(ctx context.Context, req *dto.GroupUpdateRequest, updaterID string) error {
	ret := _m.Called(ctx, req, updaterID)

	if len(ret) == 0 {
		panic("no return value specified for UpdateGroup")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.GroupUpdateRequest, string) error); ok {
		r0 = rf(ctx, req, updaterID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateMemberRole provides a mock function with given fields: ctx, groupID, req, operatorID
func (_m *GroupService) UpdateMemberRole(ctx context.Context, groupID string, req *dto.GroupMemberUpdateRequest, operatorID string) error {
	ret := _m.Called(ctx, groupID, req, operatorID)

	if len(ret) == 0 {
		panic("no return value specified for UpdateMemberRole")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *dto.GroupMemberUpdateRequest, string) error); ok {
		r0 = rf(ctx, groupID, req, operatorID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewGroupService creates a new instance of GroupService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGroupService(t interface {
	mock.TestingT
	Cleanup(func())
}) *GroupService {
	mock := &GroupService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
