// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"
	dto "oss-backend/internal/model/dto"
	entity "oss-backend/internal/model/entity"

	mock "github.com/stretchr/testify/mock"
)

// UserService is an autogenerated mock type for the UserService type
type UserService struct {
	mock.Mock
}

type UserService_Expecter struct {
	mock *mock.Mock
}

func (_m *UserService) EXPECT() *UserService_Expecter {
	return &UserService_Expecter{mock: &_m.Mock}
}

// AssignRoles provides a mock function with given fields: ctx, userID, roleIDs
func (_m *UserService) AssignRoles(ctx context.Context, userID string, roleIDs []uint) error {
	ret := _m.Called(ctx, userID, roleIDs)

	if len(ret) == 0 {
		panic("no return value specified for AssignRoles")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []uint) error); ok {
		r0 = rf(ctx, userID, roleIDs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserService_AssignRoles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AssignRoles'
type UserService_AssignRoles_Call struct {
	*mock.Call
}

// AssignRoles is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
//   - roleIDs []uint
func (_e *UserService_Expecter) AssignRoles(ctx interface{}, userID interface{}, roleIDs interface{}) *UserService_AssignRoles_Call {
	return &UserService_AssignRoles_Call{Call: _e.mock.On("AssignRoles", ctx, userID, roleIDs)}
}

func (_c *UserService_AssignRoles_Call) Run(run func(ctx context.Context, userID string, roleIDs []uint)) *UserService_AssignRoles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]uint))
	})
	return _c
}

func (_c *UserService_AssignRoles_Call) Return(_a0 error) *UserService_AssignRoles_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserService_AssignRoles_Call) RunAndReturn(run func(context.Context, string, []uint) error) *UserService_AssignRoles_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserInfo provides a mock function with given fields: ctx, id
func (_m *UserService) GetUserInfo(ctx context.Context, id string) (*dto.UserResponse, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetUserInfo")
	}

	var r0 *dto.UserResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*dto.UserResponse, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *dto.UserResponse); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.UserResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserService_GetUserInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserInfo'
type UserService_GetUserInfo_Call struct {
	*mock.Call
}

// GetUserInfo is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *UserService_Expecter) GetUserInfo(ctx interface{}, id interface{}) *UserService_GetUserInfo_Call {
	return &UserService_GetUserInfo_Call{Call: _e.mock.On("GetUserInfo", ctx, id)}
}

func (_c *UserService_GetUserInfo_Call) Run(run func(ctx context.Context, id string)) *UserService_GetUserInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UserService_GetUserInfo_Call) Return(_a0 *dto.UserResponse, _a1 error) *UserService_GetUserInfo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserService_GetUserInfo_Call) RunAndReturn(run func(context.Context, string) (*dto.UserResponse, error)) *UserService_GetUserInfo_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserRoles provides a mock function with given fields: ctx, userID
func (_m *UserService) GetUserRoles(ctx context.Context, userID string) ([]entity.Role, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserRoles")
	}

	var r0 []entity.Role
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]entity.Role, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []entity.Role); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Role)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserService_GetUserRoles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserRoles'
type UserService_GetUserRoles_Call struct {
	*mock.Call
}

// GetUserRoles is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
func (_e *UserService_Expecter) GetUserRoles(ctx interface{}, userID interface{}) *UserService_GetUserRoles_Call {
	return &UserService_GetUserRoles_Call{Call: _e.mock.On("GetUserRoles", ctx, userID)}
}

func (_c *UserService_GetUserRoles_Call) Run(run func(ctx context.Context, userID string)) *UserService_GetUserRoles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UserService_GetUserRoles_Call) Return(_a0 []entity.Role, _a1 error) *UserService_GetUserRoles_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserService_GetUserRoles_Call) RunAndReturn(run func(context.Context, string) ([]entity.Role, error)) *UserService_GetUserRoles_Call {
	_c.Call.Return(run)
	return _c
}

// InitAdminUser provides a mock function with given fields: ctx
func (_m *UserService) InitAdminUser(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for InitAdminUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserService_InitAdminUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InitAdminUser'
type UserService_InitAdminUser_Call struct {
	*mock.Call
}

// InitAdminUser is a helper method to define mock.On call
//   - ctx context.Context
func (_e *UserService_Expecter) InitAdminUser(ctx interface{}) *UserService_InitAdminUser_Call {
	return &UserService_InitAdminUser_Call{Call: _e.mock.On("InitAdminUser", ctx)}
}

func (_c *UserService_InitAdminUser_Call) Run(run func(ctx context.Context)) *UserService_InitAdminUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *UserService_InitAdminUser_Call) Return(_a0 error) *UserService_InitAdminUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserService_InitAdminUser_Call) RunAndReturn(run func(context.Context) error) *UserService_InitAdminUser_Call {
	_c.Call.Return(run)
	return _c
}

// ListUsers provides a mock function with given fields: ctx, req
func (_m *UserService) ListUsers(ctx context.Context, req *dto.UserListRequest) (*dto.UserListResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for ListUsers")
	}

	var r0 *dto.UserListResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.UserListRequest) (*dto.UserListResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dto.UserListRequest) *dto.UserListResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.UserListResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dto.UserListRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserService_ListUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListUsers'
type UserService_ListUsers_Call struct {
	*mock.Call
}

// ListUsers is a helper method to define mock.On call
//   - ctx context.Context
//   - req *dto.UserListRequest
func (_e *UserService_Expecter) ListUsers(ctx interface{}, req interface{}) *UserService_ListUsers_Call {
	return &UserService_ListUsers_Call{Call: _e.mock.On("ListUsers", ctx, req)}
}

func (_c *UserService_ListUsers_Call) Run(run func(ctx context.Context, req *dto.UserListRequest)) *UserService_ListUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*dto.UserListRequest))
	})
	return _c
}

func (_c *UserService_ListUsers_Call) Return(_a0 *dto.UserListResponse, _a1 error) *UserService_ListUsers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserService_ListUsers_Call) RunAndReturn(run func(context.Context, *dto.UserListRequest) (*dto.UserListResponse, error)) *UserService_ListUsers_Call {
	_c.Call.Return(run)
	return _c
}

// Login provides a mock function with given fields: ctx, req, ip
func (_m *UserService) Login(ctx context.Context, req *dto.UserLoginRequest, ip string) (*dto.LoginResponse, error) {
	ret := _m.Called(ctx, req, ip)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 *dto.LoginResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.UserLoginRequest, string) (*dto.LoginResponse, error)); ok {
		return rf(ctx, req, ip)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dto.UserLoginRequest, string) *dto.LoginResponse); ok {
		r0 = rf(ctx, req, ip)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.LoginResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dto.UserLoginRequest, string) error); ok {
		r1 = rf(ctx, req, ip)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserService_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type UserService_Login_Call struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
//   - ctx context.Context
//   - req *dto.UserLoginRequest
//   - ip string
func (_e *UserService_Expecter) Login(ctx interface{}, req interface{}, ip interface{}) *UserService_Login_Call {
	return &UserService_Login_Call{Call: _e.mock.On("Login", ctx, req, ip)}
}

func (_c *UserService_Login_Call) Run(run func(ctx context.Context, req *dto.UserLoginRequest, ip string)) *UserService_Login_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*dto.UserLoginRequest), args[2].(string))
	})
	return _c
}

func (_c *UserService_Login_Call) Return(_a0 *dto.LoginResponse, _a1 error) *UserService_Login_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserService_Login_Call) RunAndReturn(run func(context.Context, *dto.UserLoginRequest, string) (*dto.LoginResponse, error)) *UserService_Login_Call {
	_c.Call.Return(run)
	return _c
}

// Register provides a mock function with given fields: ctx, req
func (_m *UserService) Register(ctx context.Context, req *dto.UserRegisterRequest) (*dto.UserResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 *dto.UserResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.UserRegisterRequest) (*dto.UserResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dto.UserRegisterRequest) *dto.UserResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.UserResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dto.UserRegisterRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserService_Register_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Register'
type UserService_Register_Call struct {
	*mock.Call
}

// Register is a helper method to define mock.On call
//   - ctx context.Context
//   - req *dto.UserRegisterRequest
func (_e *UserService_Expecter) Register(ctx interface{}, req interface{}) *UserService_Register_Call {
	return &UserService_Register_Call{Call: _e.mock.On("Register", ctx, req)}
}

func (_c *UserService_Register_Call) Run(run func(ctx context.Context, req *dto.UserRegisterRequest)) *UserService_Register_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*dto.UserRegisterRequest))
	})
	return _c
}

func (_c *UserService_Register_Call) Return(_a0 *dto.UserResponse, _a1 error) *UserService_Register_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserService_Register_Call) RunAndReturn(run func(context.Context, *dto.UserRegisterRequest) (*dto.UserResponse, error)) *UserService_Register_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveRoles provides a mock function with given fields: ctx, userID, roleIDs
func (_m *UserService) RemoveRoles(ctx context.Context, userID string, roleIDs []uint) error {
	ret := _m.Called(ctx, userID, roleIDs)

	if len(ret) == 0 {
		panic("no return value specified for RemoveRoles")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []uint) error); ok {
		r0 = rf(ctx, userID, roleIDs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserService_RemoveRoles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveRoles'
type UserService_RemoveRoles_Call struct {
	*mock.Call
}

// RemoveRoles is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
//   - roleIDs []uint
func (_e *UserService_Expecter) RemoveRoles(ctx interface{}, userID interface{}, roleIDs interface{}) *UserService_RemoveRoles_Call {
	return &UserService_RemoveRoles_Call{Call: _e.mock.On("RemoveRoles", ctx, userID, roleIDs)}
}

func (_c *UserService_RemoveRoles_Call) Run(run func(ctx context.Context, userID string, roleIDs []uint)) *UserService_RemoveRoles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]uint))
	})
	return _c
}

func (_c *UserService_RemoveRoles_Call) Return(_a0 error) *UserService_RemoveRoles_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserService_RemoveRoles_Call) RunAndReturn(run func(context.Context, string, []uint) error) *UserService_RemoveRoles_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePassword provides a mock function with given fields: ctx, id, req
func (_m *UserService) UpdatePassword(ctx context.Context, id string, req *dto.UserPasswordUpdateRequest) error {
	ret := _m.Called(ctx, id, req)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePassword")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *dto.UserPasswordUpdateRequest) error); ok {
		r0 = rf(ctx, id, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserService_UpdatePassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePassword'
type UserService_UpdatePassword_Call struct {
	*mock.Call
}

// UpdatePassword is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - req *dto.UserPasswordUpdateRequest
func (_e *UserService_Expecter) UpdatePassword(ctx interface{}, id interface{}, req interface{}) *UserService_UpdatePassword_Call {
	return &UserService_UpdatePassword_Call{Call: _e.mock.On("UpdatePassword", ctx, id, req)}
}

func (_c *UserService_UpdatePassword_Call) Run(run func(ctx context.Context, id string, req *dto.UserPasswordUpdateRequest)) *UserService_UpdatePassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*dto.UserPasswordUpdateRequest))
	})
	return _c
}

func (_c *UserService_UpdatePassword_Call) Return(_a0 error) *UserService_UpdatePassword_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserService_UpdatePassword_Call) RunAndReturn(run func(context.Context, string, *dto.UserPasswordUpdateRequest) error) *UserService_UpdatePassword_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUserInfo provides a mock function with given fields: ctx, id, req
func (_m *UserService) UpdateUserInfo(ctx context.Context, id string, req *dto.UserUpdateRequest) error {
	ret := _m.Called(ctx, id, req)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserInfo")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *dto.UserUpdateRequest) error); ok {
		r0 = rf(ctx, id, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserService_UpdateUserInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUserInfo'
type UserService_UpdateUserInfo_Call struct {
	*mock.Call
}

// UpdateUserInfo is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - req *dto.UserUpdateRequest
func (_e *UserService_Expecter) UpdateUserInfo(ctx interface{}, id interface{}, req interface{}) *UserService_UpdateUserInfo_Call {
	return &UserService_UpdateUserInfo_Call{Call: _e.mock.On("UpdateUserInfo", ctx, id, req)}
}

func (_c *UserService_UpdateUserInfo_Call) Run(run func(ctx context.Context, id string, req *dto.UserUpdateRequest)) *UserService_UpdateUserInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*dto.UserUpdateRequest))
	})
	return _c
}

func (_c *UserService_UpdateUserInfo_Call) Return(_a0 error) *UserService_UpdateUserInfo_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserService_UpdateUserInfo_Call) RunAndReturn(run func(context.Context, string, *dto.UserUpdateRequest) error) *UserService_UpdateUserInfo_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUserStatus provides a mock function with given fields: ctx, id, status
func (_m *UserService) UpdateUserStatus(ctx context.Context, id string, status int) error {
	ret := _m.Called(ctx, id, status)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int) error); ok {
		r0 = rf(ctx, id, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserService_UpdateUserStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUserStatus'
type UserService_UpdateUserStatus_Call struct {
	*mock.Call
}

// UpdateUserStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - status int
func (_e *UserService_Expecter) UpdateUserStatus(ctx interface{}, id interface{}, status interface{}) *UserService_UpdateUserStatus_Call {
	return &UserService_UpdateUserStatus_Call{Call: _e.mock.On("UpdateUserStatus", ctx, id, status)}
}

func (_c *UserService_UpdateUserStatus_Call) Run(run func(ctx context.Context, id string, status int)) *UserService_UpdateUserStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int))
	})
	return _c
}

func (_c *UserService_UpdateUserStatus_Call) Return(_a0 error) *UserService_UpdateUserStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserService_UpdateUserStatus_Call) RunAndReturn(run func(context.Context, string, int) error) *UserService_UpdateUserStatus_Call {
	_c.Call.Return(run)
	return _c
}

// NewUserService creates a new instance of UserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserService(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserService {
	mock := &UserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
