// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"
	dto "oss-backend/internal/model/dto"

	mock "github.com/stretchr/testify/mock"
)

// ProjectService is an autogenerated mock type for the ProjectService type
type ProjectService struct {
	mock.Mock
}

type ProjectService_Expecter struct {
	mock *mock.Mock
}

func (_m *ProjectService) EXPECT() *ProjectService_Expecter {
	return &ProjectService_Expecter{mock: &_m.Mock}
}

// CheckUserProjectAccess provides a mock function with given fields: ctx, userID, projectID, requiredRoles
func (_m *ProjectService) CheckUserProjectAccess(ctx context.Context, userID string, projectID string, requiredRoles []string) (bool, error) {
	ret := _m.Called(ctx, userID, projectID, requiredRoles)

	if len(ret) == 0 {
		panic("no return value specified for CheckUserProjectAccess")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, []string) (bool, error)); ok {
		return rf(ctx, userID, projectID, requiredRoles)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, []string) bool); ok {
		r0 = rf(ctx, userID, projectID, requiredRoles)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, []string) error); ok {
		r1 = rf(ctx, userID, projectID, requiredRoles)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProjectService_CheckUserProjectAccess_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckUserProjectAccess'
type ProjectService_CheckUserProjectAccess_Call struct {
	*mock.Call
}

// CheckUserProjectAccess is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
//   - projectID string
//   - requiredRoles []string
func (_e *ProjectService_Expecter) CheckUserProjectAccess(ctx interface{}, userID interface{}, projectID interface{}, requiredRoles interface{}) *ProjectService_CheckUserProjectAccess_Call {
	return &ProjectService_CheckUserProjectAccess_Call{Call: _e.mock.On("CheckUserProjectAccess", ctx, userID, projectID, requiredRoles)}
}

func (_c *ProjectService_CheckUserProjectAccess_Call) Run(run func(ctx context.Context, userID string, projectID string, requiredRoles []string)) *ProjectService_CheckUserProjectAccess_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].([]string))
	})
	return _c
}

func (_c *ProjectService_CheckUserProjectAccess_Call) Return(_a0 bool, _a1 error) *ProjectService_CheckUserProjectAccess_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProjectService_CheckUserProjectAccess_Call) RunAndReturn(run func(context.Context, string, string, []string) (bool, error)) *ProjectService_CheckUserProjectAccess_Call {
	_c.Call.Return(run)
	return _c
}

// CreateProject provides a mock function with given fields: ctx, req, creatorID
func (_m *ProjectService) CreateProject(ctx context.Context, req *dto.CreateProjectRequest, creatorID string) (*dto.ProjectResponse, error) {
	ret := _m.Called(ctx, req, creatorID)

	if len(ret) == 0 {
		panic("no return value specified for CreateProject")
	}

	var r0 *dto.ProjectResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.CreateProjectRequest, string) (*dto.ProjectResponse, error)); ok {
		return rf(ctx, req, creatorID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dto.CreateProjectRequest, string) *dto.ProjectResponse); ok {
		r0 = rf(ctx, req, creatorID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.ProjectResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dto.CreateProjectRequest, string) error); ok {
		r1 = rf(ctx, req, creatorID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProjectService_CreateProject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateProject'
type ProjectService_CreateProject_Call struct {
	*mock.Call
}

// CreateProject is a helper method to define mock.On call
//   - ctx context.Context
//   - req *dto.CreateProjectRequest
//   - creatorID string
func (_e *ProjectService_Expecter) CreateProject(ctx interface{}, req interface{}, creatorID interface{}) *ProjectService_CreateProject_Call {
	return &ProjectService_CreateProject_Call{Call: _e.mock.On("CreateProject", ctx, req, creatorID)}
}

func (_c *ProjectService_CreateProject_Call) Run(run func(ctx context.Context, req *dto.CreateProjectRequest, creatorID string)) *ProjectService_CreateProject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*dto.CreateProjectRequest), args[2].(string))
	})
	return _c
}

func (_c *ProjectService_CreateProject_Call) Return(_a0 *dto.ProjectResponse, _a1 error) *ProjectService_CreateProject_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProjectService_CreateProject_Call) RunAndReturn(run func(context.Context, *dto.CreateProjectRequest, string) (*dto.ProjectResponse, error)) *ProjectService_CreateProject_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteProject provides a mock function with given fields: ctx, id, userID
func (_m *ProjectService) DeleteProject(ctx context.Context, id string, userID string) error {
	ret := _m.Called(ctx, id, userID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProject")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, id, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ProjectService_DeleteProject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteProject'
type ProjectService_DeleteProject_Call struct {
	*mock.Call
}

// DeleteProject is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - userID string
func (_e *ProjectService_Expecter) DeleteProject(ctx interface{}, id interface{}, userID interface{}) *ProjectService_DeleteProject_Call {
	return &ProjectService_DeleteProject_Call{Call: _e.mock.On("DeleteProject", ctx, id, userID)}
}

func (_c *ProjectService_DeleteProject_Call) Run(run func(ctx context.Context, id string, userID string)) *ProjectService_DeleteProject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *ProjectService_DeleteProject_Call) Return(_a0 error) *ProjectService_DeleteProject_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProjectService_DeleteProject_Call) RunAndReturn(run func(context.Context, string, string) error) *ProjectService_DeleteProject_Call {
	_c.Call.Return(run)
	return _c
}

// GetProjectByID provides a mock function with given fields: ctx, id, userID
func (_m *ProjectService) GetProjectByID(ctx context.Context, id string, userID string) (*dto.ProjectResponse, error) {
	ret := _m.Called(ctx, id, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetProjectByID")
	}

	var r0 *dto.ProjectResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*dto.ProjectResponse, error)); ok {
		return rf(ctx, id, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *dto.ProjectResponse); ok {
		r0 = rf(ctx, id, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.ProjectResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, id, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProjectService_GetProjectByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProjectByID'
type ProjectService_GetProjectByID_Call struct {
	*mock.Call
}

// GetProjectByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - userID string
func (_e *ProjectService_Expecter) GetProjectByID(ctx interface{}, id interface{}, userID interface{}) *ProjectService_GetProjectByID_Call {
	return &ProjectService_GetProjectByID_Call{Call: _e.mock.On("GetProjectByID", ctx, id, userID)}
}

func (_c *ProjectService_GetProjectByID_Call) Run(run func(ctx context.Context, id string, userID string)) *ProjectService_GetProjectByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *ProjectService_GetProjectByID_Call) Return(_a0 *dto.ProjectResponse, _a1 error) *ProjectService_GetProjectByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProjectService_GetProjectByID_Call) RunAndReturn(run func(context.Context, string, string) (*dto.ProjectResponse, error)) *ProjectService_GetProjectByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserProjects provides a mock function with given fields: ctx, query, userID
func (_m *ProjectService) GetUserProjects(ctx context.Context, query *dto.ProjectQuery, userID string) ([]*dto.ProjectResponse, int64, error) {
	ret := _m.Called(ctx, query, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserProjects")
	}

	var r0 []*dto.ProjectResponse
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.ProjectQuery, string) ([]*dto.ProjectResponse, int64, error)); ok {
		return rf(ctx, query, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dto.ProjectQuery, string) []*dto.ProjectResponse); ok {
		r0 = rf(ctx, query, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*dto.ProjectResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dto.ProjectQuery, string) int64); ok {
		r1 = rf(ctx, query, userID)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(context.Context, *dto.ProjectQuery, string) error); ok {
		r2 = rf(ctx, query, userID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ProjectService_GetUserProjects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserProjects'
type ProjectService_GetUserProjects_Call struct {
	*mock.Call
}

// GetUserProjects is a helper method to define mock.On call
//   - ctx context.Context
//   - query *dto.ProjectQuery
//   - userID string
func (_e *ProjectService_Expecter) GetUserProjects(ctx interface{}, query interface{}, userID interface{}) *ProjectService_GetUserProjects_Call {
	return &ProjectService_GetUserProjects_Call{Call: _e.mock.On("GetUserProjects", ctx, query, userID)}
}

func (_c *ProjectService_GetUserProjects_Call) Run(run func(ctx context.Context, query *dto.ProjectQuery, userID string)) *ProjectService_GetUserProjects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*dto.ProjectQuery), args[2].(string))
	})
	return _c
}

func (_c *ProjectService_GetUserProjects_Call) Return(_a0 []*dto.ProjectResponse, _a1 int64, _a2 error) *ProjectService_GetUserProjects_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ProjectService_GetUserProjects_Call) RunAndReturn(run func(context.Context, *dto.ProjectQuery, string) ([]*dto.ProjectResponse, int64, error)) *ProjectService_GetUserProjects_Call {
	_c.Call.Return(run)
	return _c
}

// ListProjectUsers provides a mock function with given fields: ctx, projectID, userID
func (_m *ProjectService) ListProjectUsers(ctx context.Context, projectID string, userID string) ([]*dto.ProjectUserResponse, error) {
	ret := _m.Called(ctx, projectID, userID)

	if len(ret) == 0 {
		panic("no return value specified for ListProjectUsers")
	}

	var r0 []*dto.ProjectUserResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) ([]*dto.ProjectUserResponse, error)); ok {
		return rf(ctx, projectID, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []*dto.ProjectUserResponse); ok {
		r0 = rf(ctx, projectID, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*dto.ProjectUserResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, projectID, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProjectService_ListProjectUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListProjectUsers'
type ProjectService_ListProjectUsers_Call struct {
	*mock.Call
}

// ListProjectUsers is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID string
//   - userID string
func (_e *ProjectService_Expecter) ListProjectUsers(ctx interface{}, projectID interface{}, userID interface{}) *ProjectService_ListProjectUsers_Call {
	return &ProjectService_ListProjectUsers_Call{Call: _e.mock.On("ListProjectUsers", ctx, projectID, userID)}
}

func (_c *ProjectService_ListProjectUsers_Call) Run(run func(ctx context.Context, projectID string, userID string)) *ProjectService_ListProjectUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *ProjectService_ListProjectUsers_Call) Return(_a0 []*dto.ProjectUserResponse, _a1 error) *ProjectService_ListProjectUsers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProjectService_ListProjectUsers_Call) RunAndReturn(run func(context.Context, string, string) ([]*dto.ProjectUserResponse, error)) *ProjectService_ListProjectUsers_Call {
	_c.Call.Return(run)
	return _c
}

// ListProjects provides a mock function with given fields: ctx, query, userID
func (_m *ProjectService) ListProjects(ctx context.Context, query *dto.ProjectQuery, userID string) ([]*dto.ProjectResponse, int64, error) {
	ret := _m.Called(ctx, query, userID)

	if len(ret) == 0 {
		panic("no return value specified for ListProjects")
	}

	var r0 []*dto.ProjectResponse
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.ProjectQuery, string) ([]*dto.ProjectResponse, int64, error)); ok {
		return rf(ctx, query, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dto.ProjectQuery, string) []*dto.ProjectResponse); ok {
		r0 = rf(ctx, query, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*dto.ProjectResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dto.ProjectQuery, string) int64); ok {
		r1 = rf(ctx, query, userID)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(context.Context, *dto.ProjectQuery, string) error); ok {
		r2 = rf(ctx, query, userID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ProjectService_ListProjects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListProjects'
type ProjectService_ListProjects_Call struct {
	*mock.Call
}

// ListProjects is a helper method to define mock.On call
//   - ctx context.Context
//   - query *dto.ProjectQuery
//   - userID string
func (_e *ProjectService_Expecter) ListProjects(ctx interface{}, query interface{}, userID interface{}) *ProjectService_ListProjects_Call {
	return &ProjectService_ListProjects_Call{Call: _e.mock.On("ListProjects", ctx, query, userID)}
}

func (_c *ProjectService_ListProjects_Call) Run(run func(ctx context.Context, query *dto.ProjectQuery, userID string)) *ProjectService_ListProjects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*dto.ProjectQuery), args[2].(string))
	})
	return _c
}

func (_c *ProjectService_ListProjects_Call) Return(_a0 []*dto.ProjectResponse, _a1 int64, _a2 error) *ProjectService_ListProjects_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ProjectService_ListProjects_Call) RunAndReturn(run func(context.Context, *dto.ProjectQuery, string) ([]*dto.ProjectResponse, int64, error)) *ProjectService_ListProjects_Call {
	_c.Call.Return(run)
	return _c
}

// RemovePermission provides a mock function with given fields: ctx, req, userID
func (_m *ProjectService) RemovePermission(ctx context.Context, req *dto.RemovePermissionRequest, userID string) error {
	ret := _m.Called(ctx, req, userID)

	if len(ret) == 0 {
		panic("no return value specified for RemovePermission")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.RemovePermissionRequest, string) error); ok {
		r0 = rf(ctx, req, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ProjectService_RemovePermission_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemovePermission'
type ProjectService_RemovePermission_Call struct {
	*mock.Call
}

// RemovePermission is a helper method to define mock.On call
//   - ctx context.Context
//   - req *dto.RemovePermissionRequest
//   - userID string
func (_e *ProjectService_Expecter) RemovePermission(ctx interface{}, req interface{}, userID interface{}) *ProjectService_RemovePermission_Call {
	return &ProjectService_RemovePermission_Call{Call: _e.mock.On("RemovePermission", ctx, req, userID)}
}

func (_c *ProjectService_RemovePermission_Call) Run(run func(ctx context.Context, req *dto.RemovePermissionRequest, userID string)) *ProjectService_RemovePermission_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*dto.RemovePermissionRequest), args[2].(string))
	})
	return _c
}

func (_c *ProjectService_RemovePermission_Call) Return(_a0 error) *ProjectService_RemovePermission_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProjectService_RemovePermission_Call) RunAndReturn(run func(context.Context, *dto.RemovePermissionRequest, string) error) *ProjectService_RemovePermission_Call {
	_c.Call.Return(run)
	return _c
}

// SetPermission provides a mock function with given fields: ctx, req, granterID
func (_m *ProjectService) SetPermission(ctx context.Context, req *dto.SetPermissionRequest, granterID string) error {
	ret := _m.Called(ctx, req, granterID)

	if len(ret) == 0 {
		panic("no return value specified for SetPermission")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.SetPermissionRequest, string) error); ok {
		r0 = rf(ctx, req, granterID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ProjectService_SetPermission_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetPermission'
type ProjectService_SetPermission_Call struct {
	*mock.Call
}

// SetPermission is a helper method to define mock.On call
//   - ctx context.Context
//   - req *dto.SetPermissionRequest
//   - granterID string
func (_e *ProjectService_Expecter) SetPermission(ctx interface{}, req interface{}, granterID interface{}) *ProjectService_SetPermission_Call {
	return &ProjectService_SetPermission_Call{Call: _e.mock.On("SetPermission", ctx, req, granterID)}
}

func (_c *ProjectService_SetPermission_Call) Run(run func(ctx context.Context, req *dto.SetPermissionRequest, granterID string)) *ProjectService_SetPermission_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*dto.SetPermissionRequest), args[2].(string))
	})
	return _c
}

func (_c *ProjectService_SetPermission_Call) Return(_a0 error) *ProjectService_SetPermission_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProjectService_SetPermission_Call) RunAndReturn(run func(context.Context, *dto.SetPermissionRequest, string) error) *ProjectService_SetPermission_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateProject provides a mock function with given fields: ctx, req, userID
func (_m *ProjectService) UpdateProject(ctx context.Context, req *dto.UpdateProjectRequest, userID string) (*dto.ProjectResponse, error) {
	ret := _m.Called(ctx, req, userID)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProject")
	}

	var r0 *dto.ProjectResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.UpdateProjectRequest, string) (*dto.ProjectResponse, error)); ok {
		return rf(ctx, req, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dto.UpdateProjectRequest, string) *dto.ProjectResponse); ok {
		r0 = rf(ctx, req, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.ProjectResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dto.UpdateProjectRequest, string) error); ok {
		r1 = rf(ctx, req, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProjectService_UpdateProject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateProject'
type ProjectService_UpdateProject_Call struct {
	*mock.Call
}

// UpdateProject is a helper method to define mock.On call
//   - ctx context.Context
//   - req *dto.UpdateProjectRequest
//   - userID string
func (_e *ProjectService_Expecter) UpdateProject(ctx interface{}, req interface{}, userID interface{}) *ProjectService_UpdateProject_Call {
	return &ProjectService_UpdateProject_Call{Call: _e.mock.On("UpdateProject", ctx, req, userID)}
}

func (_c *ProjectService_UpdateProject_Call) Run(run func(ctx context.Context, req *dto.UpdateProjectRequest, userID string)) *ProjectService_UpdateProject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*dto.UpdateProjectRequest), args[2].(string))
	})
	return _c
}

func (_c *ProjectService_UpdateProject_Call) Return(_a0 *dto.ProjectResponse, _a1 error) *ProjectService_UpdateProject_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProjectService_UpdateProject_Call) RunAndReturn(run func(context.Context, *dto.UpdateProjectRequest, string) (*dto.ProjectResponse, error)) *ProjectService_UpdateProject_Call {
	_c.Call.Return(run)
	return _c
}

// NewProjectService creates a new instance of ProjectService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProjectService(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProjectService {
	mock := &ProjectService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
