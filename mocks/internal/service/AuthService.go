// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"
	dto "oss-backend/internal/model/dto"
	entity "oss-backend/internal/model/entity"

	mock "github.com/stretchr/testify/mock"
)

// AuthService is an autogenerated mock type for the AuthService type
type AuthService struct {
	mock.Mock
}

type AuthService_Expecter struct {
	mock *mock.Mock
}

func (_m *AuthService) EXPECT() *AuthService_Expecter {
	return &AuthService_Expecter{mock: &_m.Mock}
}

// AddRoleForUser provides a mock function with given fields: ctx, userID, role, domain
func (_m *AuthService) AddRoleForUser(ctx context.Context, userID string, role string, domain string) error {
	ret := _m.Called(ctx, userID, role, domain)

	if len(ret) == 0 {
		panic("no return value specified for AddRoleForUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, userID, role, domain)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AuthService_AddRoleForUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddRoleForUser'
type AuthService_AddRoleForUser_Call struct {
	*mock.Call
}

// AddRoleForUser is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
//   - role string
//   - domain string
func (_e *AuthService_Expecter) AddRoleForUser(ctx interface{}, userID interface{}, role interface{}, domain interface{}) *AuthService_AddRoleForUser_Call {
	return &AuthService_AddRoleForUser_Call{Call: _e.mock.On("AddRoleForUser", ctx, userID, role, domain)}
}

func (_c *AuthService_AddRoleForUser_Call) Run(run func(ctx context.Context, userID string, role string, domain string)) *AuthService_AddRoleForUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *AuthService_AddRoleForUser_Call) Return(_a0 error) *AuthService_AddRoleForUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AuthService_AddRoleForUser_Call) RunAndReturn(run func(context.Context, string, string, string) error) *AuthService_AddRoleForUser_Call {
	_c.Call.Return(run)
	return _c
}

// AssignRolesToUser provides a mock function with given fields: ctx, userID, roleIDs, domain
func (_m *AuthService) AssignRolesToUser(ctx context.Context, userID string, roleIDs []uint, domain string) error {
	ret := _m.Called(ctx, userID, roleIDs, domain)

	if len(ret) == 0 {
		panic("no return value specified for AssignRolesToUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []uint, string) error); ok {
		r0 = rf(ctx, userID, roleIDs, domain)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AuthService_AssignRolesToUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AssignRolesToUser'
type AuthService_AssignRolesToUser_Call struct {
	*mock.Call
}

// AssignRolesToUser is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
//   - roleIDs []uint
//   - domain string
func (_e *AuthService_Expecter) AssignRolesToUser(ctx interface{}, userID interface{}, roleIDs interface{}, domain interface{}) *AuthService_AssignRolesToUser_Call {
	return &AuthService_AssignRolesToUser_Call{Call: _e.mock.On("AssignRolesToUser", ctx, userID, roleIDs, domain)}
}

func (_c *AuthService_AssignRolesToUser_Call) Run(run func(ctx context.Context, userID string, roleIDs []uint, domain string)) *AuthService_AssignRolesToUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]uint), args[3].(string))
	})
	return _c
}

func (_c *AuthService_AssignRolesToUser_Call) Return(_a0 error) *AuthService_AssignRolesToUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AuthService_AssignRolesToUser_Call) RunAndReturn(run func(context.Context, string, []uint, string) error) *AuthService_AssignRolesToUser_Call {
	_c.Call.Return(run)
	return _c
}

// CanUserAccessResource provides a mock function with given fields: ctx, userID, resourceType, action, domain
func (_m *AuthService) CanUserAccessResource(ctx context.Context, userID string, resourceType string, action string, domain string) (bool, error) {
	ret := _m.Called(ctx, userID, resourceType, action, domain)

	if len(ret) == 0 {
		panic("no return value specified for CanUserAccessResource")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) (bool, error)); ok {
		return rf(ctx, userID, resourceType, action, domain)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) bool); ok {
		r0 = rf(ctx, userID, resourceType, action, domain)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, string) error); ok {
		r1 = rf(ctx, userID, resourceType, action, domain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuthService_CanUserAccessResource_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CanUserAccessResource'
type AuthService_CanUserAccessResource_Call struct {
	*mock.Call
}

// CanUserAccessResource is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
//   - resourceType string
//   - action string
//   - domain string
func (_e *AuthService_Expecter) CanUserAccessResource(ctx interface{}, userID interface{}, resourceType interface{}, action interface{}, domain interface{}) *AuthService_CanUserAccessResource_Call {
	return &AuthService_CanUserAccessResource_Call{Call: _e.mock.On("CanUserAccessResource", ctx, userID, resourceType, action, domain)}
}

func (_c *AuthService_CanUserAccessResource_Call) Run(run func(ctx context.Context, userID string, resourceType string, action string, domain string)) *AuthService_CanUserAccessResource_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(string))
	})
	return _c
}

func (_c *AuthService_CanUserAccessResource_Call) Return(_a0 bool, _a1 error) *AuthService_CanUserAccessResource_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AuthService_CanUserAccessResource_Call) RunAndReturn(run func(context.Context, string, string, string, string) (bool, error)) *AuthService_CanUserAccessResource_Call {
	_c.Call.Return(run)
	return _c
}

// CheckPermission provides a mock function with given fields: sub, domain, obj, act
func (_m *AuthService) CheckPermission(sub string, domain string, obj string, act string) (bool, error) {
	ret := _m.Called(sub, domain, obj, act)

	if len(ret) == 0 {
		panic("no return value specified for CheckPermission")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string, string) (bool, error)); ok {
		return rf(sub, domain, obj, act)
	}
	if rf, ok := ret.Get(0).(func(string, string, string, string) bool); ok {
		r0 = rf(sub, domain, obj, act)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string, string, string, string) error); ok {
		r1 = rf(sub, domain, obj, act)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuthService_CheckPermission_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckPermission'
type AuthService_CheckPermission_Call struct {
	*mock.Call
}

// CheckPermission is a helper method to define mock.On call
//   - sub string
//   - domain string
//   - obj string
//   - act string
func (_e *AuthService_Expecter) CheckPermission(sub interface{}, domain interface{}, obj interface{}, act interface{}) *AuthService_CheckPermission_Call {
	return &AuthService_CheckPermission_Call{Call: _e.mock.On("CheckPermission", sub, domain, obj, act)}
}

func (_c *AuthService_CheckPermission_Call) Run(run func(sub string, domain string, obj string, act string)) *AuthService_CheckPermission_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *AuthService_CheckPermission_Call) Return(_a0 bool, _a1 error) *AuthService_CheckPermission_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AuthService_CheckPermission_Call) RunAndReturn(run func(string, string, string, string) (bool, error)) *AuthService_CheckPermission_Call {
	_c.Call.Return(run)
	return _c
}

// CreateRole provides a mock function with given fields: ctx, role
func (_m *AuthService) CreateRole(ctx context.Context, role *entity.Role) error {
	ret := _m.Called(ctx, role)

	if len(ret) == 0 {
		panic("no return value specified for CreateRole")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Role) error); ok {
		r0 = rf(ctx, role)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AuthService_CreateRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateRole'
type AuthService_CreateRole_Call struct {
	*mock.Call
}

// CreateRole is a helper method to define mock.On call
//   - ctx context.Context
//   - role *entity.Role
func (_e *AuthService_Expecter) CreateRole(ctx interface{}, role interface{}) *AuthService_CreateRole_Call {
	return &AuthService_CreateRole_Call{Call: _e.mock.On("CreateRole", ctx, role)}
}

func (_c *AuthService_CreateRole_Call) Run(run func(ctx context.Context, role *entity.Role)) *AuthService_CreateRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entity.Role))
	})
	return _c
}

func (_c *AuthService_CreateRole_Call) Return(_a0 error) *AuthService_CreateRole_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AuthService_CreateRole_Call) RunAndReturn(run func(context.Context, *entity.Role) error) *AuthService_CreateRole_Call {
	_c.Call.Return(run)
	return _c
}

// CreateRoleFromDTO provides a mock function with given fields: ctx, req, createdBy
func (_m *AuthService) CreateRoleFromDTO(ctx context.Context, req *dto.RoleCreateRequest, createdBy string) error {
	ret := _m.Called(ctx, req, createdBy)

	if len(ret) == 0 {
		panic("no return value specified for CreateRoleFromDTO")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.RoleCreateRequest, string) error); ok {
		r0 = rf(ctx, req, createdBy)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AuthService_CreateRoleFromDTO_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateRoleFromDTO'
type AuthService_CreateRoleFromDTO_Call struct {
	*mock.Call
}

// CreateRoleFromDTO is a helper method to define mock.On call
//   - ctx context.Context
//   - req *dto.RoleCreateRequest
//   - createdBy string
func (_e *AuthService_Expecter) CreateRoleFromDTO(ctx interface{}, req interface{}, createdBy interface{}) *AuthService_CreateRoleFromDTO_Call {
	return &AuthService_CreateRoleFromDTO_Call{Call: _e.mock.On("CreateRoleFromDTO", ctx, req, createdBy)}
}

func (_c *AuthService_CreateRoleFromDTO_Call) Run(run func(ctx context.Context, req *dto.RoleCreateRequest, createdBy string)) *AuthService_CreateRoleFromDTO_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*dto.RoleCreateRequest), args[2].(string))
	})
	return _c
}

func (_c *AuthService_CreateRoleFromDTO_Call) Return(_a0 error) *AuthService_CreateRoleFromDTO_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AuthService_CreateRoleFromDTO_Call) RunAndReturn(run func(context.Context, *dto.RoleCreateRequest, string) error) *AuthService_CreateRoleFromDTO_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteRole provides a mock function with given fields: ctx, id
func (_m *AuthService) DeleteRole(ctx context.Context, id uint) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRole")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AuthService_DeleteRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteRole'
type AuthService_DeleteRole_Call struct {
	*mock.Call
}

// DeleteRole is a helper method to define mock.On call
//   - ctx context.Context
//   - id uint
func (_e *AuthService_Expecter) DeleteRole(ctx interface{}, id interface{}) *AuthService_DeleteRole_Call {
	return &AuthService_DeleteRole_Call{Call: _e.mock.On("DeleteRole", ctx, id)}
}

func (_c *AuthService_DeleteRole_Call) Run(run func(ctx context.Context, id uint)) *AuthService_DeleteRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint))
	})
	return _c
}

func (_c *AuthService_DeleteRole_Call) Return(_a0 error) *AuthService_DeleteRole_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AuthService_DeleteRole_Call) RunAndReturn(run func(context.Context, uint) error) *AuthService_DeleteRole_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllRoles provides a mock function with given fields: ctx
func (_m *AuthService) GetAllRoles(ctx context.Context) ([]entity.Role, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllRoles")
	}

	var r0 []entity.Role
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]entity.Role, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []entity.Role); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Role)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuthService_GetAllRoles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllRoles'
type AuthService_GetAllRoles_Call struct {
	*mock.Call
}

// GetAllRoles is a helper method to define mock.On call
//   - ctx context.Context
func (_e *AuthService_Expecter) GetAllRoles(ctx interface{}) *AuthService_GetAllRoles_Call {
	return &AuthService_GetAllRoles_Call{Call: _e.mock.On("GetAllRoles", ctx)}
}

func (_c *AuthService_GetAllRoles_Call) Run(run func(ctx context.Context)) *AuthService_GetAllRoles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *AuthService_GetAllRoles_Call) Return(_a0 []entity.Role, _a1 error) *AuthService_GetAllRoles_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AuthService_GetAllRoles_Call) RunAndReturn(run func(context.Context) ([]entity.Role, error)) *AuthService_GetAllRoles_Call {
	_c.Call.Return(run)
	return _c
}

// GetRoleByCode provides a mock function with given fields: ctx, code
func (_m *AuthService) GetRoleByCode(ctx context.Context, code string) (*entity.Role, error) {
	ret := _m.Called(ctx, code)

	if len(ret) == 0 {
		panic("no return value specified for GetRoleByCode")
	}

	var r0 *entity.Role
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*entity.Role, error)); ok {
		return rf(ctx, code)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *entity.Role); ok {
		r0 = rf(ctx, code)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Role)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, code)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuthService_GetRoleByCode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRoleByCode'
type AuthService_GetRoleByCode_Call struct {
	*mock.Call
}

// GetRoleByCode is a helper method to define mock.On call
//   - ctx context.Context
//   - code string
func (_e *AuthService_Expecter) GetRoleByCode(ctx interface{}, code interface{}) *AuthService_GetRoleByCode_Call {
	return &AuthService_GetRoleByCode_Call{Call: _e.mock.On("GetRoleByCode", ctx, code)}
}

func (_c *AuthService_GetRoleByCode_Call) Run(run func(ctx context.Context, code string)) *AuthService_GetRoleByCode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *AuthService_GetRoleByCode_Call) Return(_a0 *entity.Role, _a1 error) *AuthService_GetRoleByCode_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AuthService_GetRoleByCode_Call) RunAndReturn(run func(context.Context, string) (*entity.Role, error)) *AuthService_GetRoleByCode_Call {
	_c.Call.Return(run)
	return _c
}

// GetRoleByID provides a mock function with given fields: ctx, id
func (_m *AuthService) GetRoleByID(ctx context.Context, id uint) (*entity.Role, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetRoleByID")
	}

	var r0 *entity.Role
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) (*entity.Role, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint) *entity.Role); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Role)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuthService_GetRoleByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRoleByID'
type AuthService_GetRoleByID_Call struct {
	*mock.Call
}

// GetRoleByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id uint
func (_e *AuthService_Expecter) GetRoleByID(ctx interface{}, id interface{}) *AuthService_GetRoleByID_Call {
	return &AuthService_GetRoleByID_Call{Call: _e.mock.On("GetRoleByID", ctx, id)}
}

func (_c *AuthService_GetRoleByID_Call) Run(run func(ctx context.Context, id uint)) *AuthService_GetRoleByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint))
	})
	return _c
}

func (_c *AuthService_GetRoleByID_Call) Return(_a0 *entity.Role, _a1 error) *AuthService_GetRoleByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AuthService_GetRoleByID_Call) RunAndReturn(run func(context.Context, uint) (*entity.Role, error)) *AuthService_GetRoleByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetRolesForUser provides a mock function with given fields: subject, domain
func (_m *AuthService) GetRolesForUser(subject string, domain string) ([]string, error) {
	ret := _m.Called(subject, domain)

	if len(ret) == 0 {
		panic("no return value specified for GetRolesForUser")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) ([]string, error)); ok {
		return rf(subject, domain)
	}
	if rf, ok := ret.Get(0).(func(string, string) []string); ok {
		r0 = rf(subject, domain)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(subject, domain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuthService_GetRolesForUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRolesForUser'
type AuthService_GetRolesForUser_Call struct {
	*mock.Call
}

// GetRolesForUser is a helper method to define mock.On call
//   - subject string
//   - domain string
func (_e *AuthService_Expecter) GetRolesForUser(subject interface{}, domain interface{}) *AuthService_GetRolesForUser_Call {
	return &AuthService_GetRolesForUser_Call{Call: _e.mock.On("GetRolesForUser", subject, domain)}
}

func (_c *AuthService_GetRolesForUser_Call) Run(run func(subject string, domain string)) *AuthService_GetRolesForUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *AuthService_GetRolesForUser_Call) Return(_a0 []string, _a1 error) *AuthService_GetRolesForUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AuthService_GetRolesForUser_Call) RunAndReturn(run func(string, string) ([]string, error)) *AuthService_GetRolesForUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserRoles provides a mock function with given fields: ctx, userID
func (_m *AuthService) GetUserRoles(ctx context.Context, userID string) ([]entity.Role, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserRoles")
	}

	var r0 []entity.Role
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]entity.Role, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []entity.Role); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Role)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuthService_GetUserRoles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserRoles'
type AuthService_GetUserRoles_Call struct {
	*mock.Call
}

// GetUserRoles is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
func (_e *AuthService_Expecter) GetUserRoles(ctx interface{}, userID interface{}) *AuthService_GetUserRoles_Call {
	return &AuthService_GetUserRoles_Call{Call: _e.mock.On("GetUserRoles", ctx, userID)}
}

func (_c *AuthService_GetUserRoles_Call) Run(run func(ctx context.Context, userID string)) *AuthService_GetUserRoles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *AuthService_GetUserRoles_Call) Return(_a0 []entity.Role, _a1 error) *AuthService_GetUserRoles_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AuthService_GetUserRoles_Call) RunAndReturn(run func(context.Context, string) ([]entity.Role, error)) *AuthService_GetUserRoles_Call {
	_c.Call.Return(run)
	return _c
}

// InitializeRBAC provides a mock function with no fields
func (_m *AuthService) InitializeRBAC() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for InitializeRBAC")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AuthService_InitializeRBAC_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InitializeRBAC'
type AuthService_InitializeRBAC_Call struct {
	*mock.Call
}

// InitializeRBAC is a helper method to define mock.On call
func (_e *AuthService_Expecter) InitializeRBAC() *AuthService_InitializeRBAC_Call {
	return &AuthService_InitializeRBAC_Call{Call: _e.mock.On("InitializeRBAC")}
}

func (_c *AuthService_InitializeRBAC_Call) Run(run func()) *AuthService_InitializeRBAC_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *AuthService_InitializeRBAC_Call) Return(_a0 error) *AuthService_InitializeRBAC_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AuthService_InitializeRBAC_Call) RunAndReturn(run func() error) *AuthService_InitializeRBAC_Call {
	_c.Call.Return(run)
	return _c
}

// IsUserInRole provides a mock function with given fields: ctx, userID, roleCode, domain
func (_m *AuthService) IsUserInRole(ctx context.Context, userID string, roleCode string, domain string) (bool, error) {
	ret := _m.Called(ctx, userID, roleCode, domain)

	if len(ret) == 0 {
		panic("no return value specified for IsUserInRole")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (bool, error)); ok {
		return rf(ctx, userID, roleCode, domain)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) bool); ok {
		r0 = rf(ctx, userID, roleCode, domain)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, userID, roleCode, domain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuthService_IsUserInRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsUserInRole'
type AuthService_IsUserInRole_Call struct {
	*mock.Call
}

// IsUserInRole is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
//   - roleCode string
//   - domain string
func (_e *AuthService_Expecter) IsUserInRole(ctx interface{}, userID interface{}, roleCode interface{}, domain interface{}) *AuthService_IsUserInRole_Call {
	return &AuthService_IsUserInRole_Call{Call: _e.mock.On("IsUserInRole", ctx, userID, roleCode, domain)}
}

func (_c *AuthService_IsUserInRole_Call) Run(run func(ctx context.Context, userID string, roleCode string, domain string)) *AuthService_IsUserInRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *AuthService_IsUserInRole_Call) Return(_a0 bool, _a1 error) *AuthService_IsUserInRole_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AuthService_IsUserInRole_Call) RunAndReturn(run func(context.Context, string, string, string) (bool, error)) *AuthService_IsUserInRole_Call {
	_c.Call.Return(run)
	return _c
}

// ListRoles provides a mock function with given fields: ctx, req
func (_m *AuthService) ListRoles(ctx context.Context, req *dto.RoleListRequest) (*dto.RoleListResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for ListRoles")
	}

	var r0 *dto.RoleListResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.RoleListRequest) (*dto.RoleListResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dto.RoleListRequest) *dto.RoleListResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.RoleListResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dto.RoleListRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuthService_ListRoles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListRoles'
type AuthService_ListRoles_Call struct {
	*mock.Call
}

// ListRoles is a helper method to define mock.On call
//   - ctx context.Context
//   - req *dto.RoleListRequest
func (_e *AuthService_Expecter) ListRoles(ctx interface{}, req interface{}) *AuthService_ListRoles_Call {
	return &AuthService_ListRoles_Call{Call: _e.mock.On("ListRoles", ctx, req)}
}

func (_c *AuthService_ListRoles_Call) Run(run func(ctx context.Context, req *dto.RoleListRequest)) *AuthService_ListRoles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*dto.RoleListRequest))
	})
	return _c
}

func (_c *AuthService_ListRoles_Call) Return(_a0 *dto.RoleListResponse, _a1 error) *AuthService_ListRoles_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AuthService_ListRoles_Call) RunAndReturn(run func(context.Context, *dto.RoleListRequest) (*dto.RoleListResponse, error)) *AuthService_ListRoles_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveRoleForUser provides a mock function with given fields: ctx, userID, role, domain
func (_m *AuthService) RemoveRoleForUser(ctx context.Context, userID string, role string, domain string) error {
	ret := _m.Called(ctx, userID, role, domain)

	if len(ret) == 0 {
		panic("no return value specified for RemoveRoleForUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, userID, role, domain)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AuthService_RemoveRoleForUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveRoleForUser'
type AuthService_RemoveRoleForUser_Call struct {
	*mock.Call
}

// RemoveRoleForUser is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
//   - role string
//   - domain string
func (_e *AuthService_Expecter) RemoveRoleForUser(ctx interface{}, userID interface{}, role interface{}, domain interface{}) *AuthService_RemoveRoleForUser_Call {
	return &AuthService_RemoveRoleForUser_Call{Call: _e.mock.On("RemoveRoleForUser", ctx, userID, role, domain)}
}

func (_c *AuthService_RemoveRoleForUser_Call) Run(run func(ctx context.Context, userID string, role string, domain string)) *AuthService_RemoveRoleForUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *AuthService_RemoveRoleForUser_Call) Return(_a0 error) *AuthService_RemoveRoleForUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AuthService_RemoveRoleForUser_Call) RunAndReturn(run func(context.Context, string, string, string) error) *AuthService_RemoveRoleForUser_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveRolesFromUser provides a mock function with given fields: ctx, userID, roleIDs, domain
func (_m *AuthService) RemoveRolesFromUser(ctx context.Context, userID string, roleIDs []uint, domain string) error {
	ret := _m.Called(ctx, userID, roleIDs, domain)

	if len(ret) == 0 {
		panic("no return value specified for RemoveRolesFromUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []uint, string) error); ok {
		r0 = rf(ctx, userID, roleIDs, domain)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AuthService_RemoveRolesFromUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveRolesFromUser'
type AuthService_RemoveRolesFromUser_Call struct {
	*mock.Call
}

// RemoveRolesFromUser is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
//   - roleIDs []uint
//   - domain string
func (_e *AuthService_Expecter) RemoveRolesFromUser(ctx interface{}, userID interface{}, roleIDs interface{}, domain interface{}) *AuthService_RemoveRolesFromUser_Call {
	return &AuthService_RemoveRolesFromUser_Call{Call: _e.mock.On("RemoveRolesFromUser", ctx, userID, roleIDs, domain)}
}

func (_c *AuthService_RemoveRolesFromUser_Call) Run(run func(ctx context.Context, userID string, roleIDs []uint, domain string)) *AuthService_RemoveRolesFromUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]uint), args[3].(string))
	})
	return _c
}

func (_c *AuthService_RemoveRolesFromUser_Call) Return(_a0 error) *AuthService_RemoveRolesFromUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AuthService_RemoveRolesFromUser_Call) RunAndReturn(run func(context.Context, string, []uint, string) error) *AuthService_RemoveRolesFromUser_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateRole provides a mock function with given fields: ctx, role
func (_m *AuthService) UpdateRole(ctx context.Context, role *entity.Role) error {
	ret := _m.Called(ctx, role)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRole")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Role) error); ok {
		r0 = rf(ctx, role)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AuthService_UpdateRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateRole'
type AuthService_UpdateRole_Call struct {
	*mock.Call
}

// UpdateRole is a helper method to define mock.On call
//   - ctx context.Context
//   - role *entity.Role
func (_e *AuthService_Expecter) UpdateRole(ctx interface{}, role interface{}) *AuthService_UpdateRole_Call {
	return &AuthService_UpdateRole_Call{Call: _e.mock.On("UpdateRole", ctx, role)}
}

func (_c *AuthService_UpdateRole_Call) Run(run func(ctx context.Context, role *entity.Role)) *AuthService_UpdateRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entity.Role))
	})
	return _c
}

func (_c *AuthService_UpdateRole_Call) Return(_a0 error) *AuthService_UpdateRole_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AuthService_UpdateRole_Call) RunAndReturn(run func(context.Context, *entity.Role) error) *AuthService_UpdateRole_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateRoleFromDTO provides a mock function with given fields: ctx, req, updatedBy
func (_m *AuthService) UpdateRoleFromDTO(ctx context.Context, req *dto.RoleUpdateRequest, updatedBy string) error {
	ret := _m.Called(ctx, req, updatedBy)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRoleFromDTO")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.RoleUpdateRequest, string) error); ok {
		r0 = rf(ctx, req, updatedBy)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AuthService_UpdateRoleFromDTO_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateRoleFromDTO'
type AuthService_UpdateRoleFromDTO_Call struct {
	*mock.Call
}

// UpdateRoleFromDTO is a helper method to define mock.On call
//   - ctx context.Context
//   - req *dto.RoleUpdateRequest
//   - updatedBy string
func (_e *AuthService_Expecter) UpdateRoleFromDTO(ctx interface{}, req interface{}, updatedBy interface{}) *AuthService_UpdateRoleFromDTO_Call {
	return &AuthService_UpdateRoleFromDTO_Call{Call: _e.mock.On("UpdateRoleFromDTO", ctx, req, updatedBy)}
}

func (_c *AuthService_UpdateRoleFromDTO_Call) Run(run func(ctx context.Context, req *dto.RoleUpdateRequest, updatedBy string)) *AuthService_UpdateRoleFromDTO_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*dto.RoleUpdateRequest), args[2].(string))
	})
	return _c
}

func (_c *AuthService_UpdateRoleFromDTO_Call) Return(_a0 error) *AuthService_UpdateRoleFromDTO_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AuthService_UpdateRoleFromDTO_Call) RunAndReturn(run func(context.Context, *dto.RoleUpdateRequest, string) error) *AuthService_UpdateRoleFromDTO_Call {
	_c.Call.Return(run)
	return _c
}

// NewAuthService creates a new instance of AuthService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuthService(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuthService {
	mock := &AuthService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
