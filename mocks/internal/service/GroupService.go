// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"
	dto "oss-backend/internal/model/dto"

	mock "github.com/stretchr/testify/mock"
)

// GroupService is an autogenerated mock type for the GroupService type
type GroupService struct {
	mock.Mock
}

type GroupService_Expecter struct {
	mock *mock.Mock
}

func (_m *GroupService) EXPECT() *GroupService_Expecter {
	return &GroupService_Expecter{mock: &_m.Mock}
}

// AddMember provides a mock function with given fields: ctx, groupID, userID, role, operatorID
func (_m *GroupService) AddMember(ctx context.Context, groupID string, userID string, role string, operatorID string) error {
	ret := _m.Called(ctx, groupID, userID, role, operatorID)

	if len(ret) == 0 {
		panic("no return value specified for AddMember")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) error); ok {
		r0 = rf(ctx, groupID, userID, role, operatorID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GroupService_AddMember_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddMember'
type GroupService_AddMember_Call struct {
	*mock.Call
}

// AddMember is a helper method to define mock.On call
//   - ctx context.Context
//   - groupID string
//   - userID string
//   - role string
//   - operatorID string
func (_e *GroupService_Expecter) AddMember(ctx interface{}, groupID interface{}, userID interface{}, role interface{}, operatorID interface{}) *GroupService_AddMember_Call {
	return &GroupService_AddMember_Call{Call: _e.mock.On("AddMember", ctx, groupID, userID, role, operatorID)}
}

func (_c *GroupService_AddMember_Call) Run(run func(ctx context.Context, groupID string, userID string, role string, operatorID string)) *GroupService_AddMember_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(string))
	})
	return _c
}

func (_c *GroupService_AddMember_Call) Return(_a0 error) *GroupService_AddMember_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GroupService_AddMember_Call) RunAndReturn(run func(context.Context, string, string, string, string) error) *GroupService_AddMember_Call {
	_c.Call.Return(run)
	return _c
}

// CheckUserGroupRole provides a mock function with given fields: ctx, groupID, userID
func (_m *GroupService) CheckUserGroupRole(ctx context.Context, groupID string, userID string) (string, error) {
	ret := _m.Called(ctx, groupID, userID)

	if len(ret) == 0 {
		panic("no return value specified for CheckUserGroupRole")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (string, error)); ok {
		return rf(ctx, groupID, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) string); ok {
		r0 = rf(ctx, groupID, userID)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, groupID, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GroupService_CheckUserGroupRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckUserGroupRole'
type GroupService_CheckUserGroupRole_Call struct {
	*mock.Call
}

// CheckUserGroupRole is a helper method to define mock.On call
//   - ctx context.Context
//   - groupID string
//   - userID string
func (_e *GroupService_Expecter) CheckUserGroupRole(ctx interface{}, groupID interface{}, userID interface{}) *GroupService_CheckUserGroupRole_Call {
	return &GroupService_CheckUserGroupRole_Call{Call: _e.mock.On("CheckUserGroupRole", ctx, groupID, userID)}
}

func (_c *GroupService_CheckUserGroupRole_Call) Run(run func(ctx context.Context, groupID string, userID string)) *GroupService_CheckUserGroupRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *GroupService_CheckUserGroupRole_Call) Return(_a0 string, _a1 error) *GroupService_CheckUserGroupRole_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GroupService_CheckUserGroupRole_Call) RunAndReturn(run func(context.Context, string, string) (string, error)) *GroupService_CheckUserGroupRole_Call {
	_c.Call.Return(run)
	return _c
}

// CreateGroup provides a mock function with given fields: ctx, req, creatorID
func (_m *GroupService) CreateGroup(ctx context.Context, req *dto.GroupCreateRequest, creatorID string) error {
	ret := _m.Called(ctx, req, creatorID)

	if len(ret) == 0 {
		panic("no return value specified for CreateGroup")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.GroupCreateRequest, string) error); ok {
		r0 = rf(ctx, req, creatorID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GroupService_CreateGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateGroup'
type GroupService_CreateGroup_Call struct {
	*mock.Call
}

// CreateGroup is a helper method to define mock.On call
//   - ctx context.Context
//   - req *dto.GroupCreateRequest
//   - creatorID string
func (_e *GroupService_Expecter) CreateGroup(ctx interface{}, req interface{}, creatorID interface{}) *GroupService_CreateGroup_Call {
	return &GroupService_CreateGroup_Call{Call: _e.mock.On("CreateGroup", ctx, req, creatorID)}
}

func (_c *GroupService_CreateGroup_Call) Run(run func(ctx context.Context, req *dto.GroupCreateRequest, creatorID string)) *GroupService_CreateGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*dto.GroupCreateRequest), args[2].(string))
	})
	return _c
}

func (_c *GroupService_CreateGroup_Call) Return(_a0 error) *GroupService_CreateGroup_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GroupService_CreateGroup_Call) RunAndReturn(run func(context.Context, *dto.GroupCreateRequest, string) error) *GroupService_CreateGroup_Call {
	_c.Call.Return(run)
	return _c
}

// GenerateInviteCode provides a mock function with given fields: ctx, req, userID
func (_m *GroupService) GenerateInviteCode(ctx context.Context, req *dto.GroupInviteRequest, userID string) (*dto.GroupInviteResponse, error) {
	ret := _m.Called(ctx, req, userID)

	if len(ret) == 0 {
		panic("no return value specified for GenerateInviteCode")
	}

	var r0 *dto.GroupInviteResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.GroupInviteRequest, string) (*dto.GroupInviteResponse, error)); ok {
		return rf(ctx, req, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dto.GroupInviteRequest, string) *dto.GroupInviteResponse); ok {
		r0 = rf(ctx, req, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.GroupInviteResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dto.GroupInviteRequest, string) error); ok {
		r1 = rf(ctx, req, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GroupService_GenerateInviteCode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateInviteCode'
type GroupService_GenerateInviteCode_Call struct {
	*mock.Call
}

// GenerateInviteCode is a helper method to define mock.On call
//   - ctx context.Context
//   - req *dto.GroupInviteRequest
//   - userID string
func (_e *GroupService_Expecter) GenerateInviteCode(ctx interface{}, req interface{}, userID interface{}) *GroupService_GenerateInviteCode_Call {
	return &GroupService_GenerateInviteCode_Call{Call: _e.mock.On("GenerateInviteCode", ctx, req, userID)}
}

func (_c *GroupService_GenerateInviteCode_Call) Run(run func(ctx context.Context, req *dto.GroupInviteRequest, userID string)) *GroupService_GenerateInviteCode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*dto.GroupInviteRequest), args[2].(string))
	})
	return _c
}

func (_c *GroupService_GenerateInviteCode_Call) Return(_a0 *dto.GroupInviteResponse, _a1 error) *GroupService_GenerateInviteCode_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GroupService_GenerateInviteCode_Call) RunAndReturn(run func(context.Context, *dto.GroupInviteRequest, string) (*dto.GroupInviteResponse, error)) *GroupService_GenerateInviteCode_Call {
	_c.Call.Return(run)
	return _c
}

// GetGroupByID provides a mock function with given fields: ctx, id, userID
func (_m *GroupService) GetGroupByID(ctx context.Context, id string, userID string) (*dto.GroupResponse, error) {
	ret := _m.Called(ctx, id, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetGroupByID")
	}

	var r0 *dto.GroupResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*dto.GroupResponse, error)); ok {
		return rf(ctx, id, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *dto.GroupResponse); ok {
		r0 = rf(ctx, id, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.GroupResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, id, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GroupService_GetGroupByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGroupByID'
type GroupService_GetGroupByID_Call struct {
	*mock.Call
}

// GetGroupByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - userID string
func (_e *GroupService_Expecter) GetGroupByID(ctx interface{}, id interface{}, userID interface{}) *GroupService_GetGroupByID_Call {
	return &GroupService_GetGroupByID_Call{Call: _e.mock.On("GetGroupByID", ctx, id, userID)}
}

func (_c *GroupService_GetGroupByID_Call) Run(run func(ctx context.Context, id string, userID string)) *GroupService_GetGroupByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *GroupService_GetGroupByID_Call) Return(_a0 *dto.GroupResponse, _a1 error) *GroupService_GetGroupByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GroupService_GetGroupByID_Call) RunAndReturn(run func(context.Context, string, string) (*dto.GroupResponse, error)) *GroupService_GetGroupByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserGroups provides a mock function with given fields: ctx, userID
func (_m *GroupService) GetUserGroups(ctx context.Context, userID string) ([]dto.GroupResponse, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserGroups")
	}

	var r0 []dto.GroupResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]dto.GroupResponse, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []dto.GroupResponse); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.GroupResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GroupService_GetUserGroups_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserGroups'
type GroupService_GetUserGroups_Call struct {
	*mock.Call
}

// GetUserGroups is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
func (_e *GroupService_Expecter) GetUserGroups(ctx interface{}, userID interface{}) *GroupService_GetUserGroups_Call {
	return &GroupService_GetUserGroups_Call{Call: _e.mock.On("GetUserGroups", ctx, userID)}
}

func (_c *GroupService_GetUserGroups_Call) Run(run func(ctx context.Context, userID string)) *GroupService_GetUserGroups_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *GroupService_GetUserGroups_Call) Return(_a0 []dto.GroupResponse, _a1 error) *GroupService_GetUserGroups_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GroupService_GetUserGroups_Call) RunAndReturn(run func(context.Context, string) ([]dto.GroupResponse, error)) *GroupService_GetUserGroups_Call {
	_c.Call.Return(run)
	return _c
}

// JoinGroup provides a mock function with given fields: ctx, req, userID
func (_m *GroupService) JoinGroup(ctx context.Context, req *dto.GroupJoinRequest, userID string) error {
	ret := _m.Called(ctx, req, userID)

	if len(ret) == 0 {
		panic("no return value specified for JoinGroup")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.GroupJoinRequest, string) error); ok {
		r0 = rf(ctx, req, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GroupService_JoinGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'JoinGroup'
type GroupService_JoinGroup_Call struct {
	*mock.Call
}

// JoinGroup is a helper method to define mock.On call
//   - ctx context.Context
//   - req *dto.GroupJoinRequest
//   - userID string
func (_e *GroupService_Expecter) JoinGroup(ctx interface{}, req interface{}, userID interface{}) *GroupService_JoinGroup_Call {
	return &GroupService_JoinGroup_Call{Call: _e.mock.On("JoinGroup", ctx, req, userID)}
}

func (_c *GroupService_JoinGroup_Call) Run(run func(ctx context.Context, req *dto.GroupJoinRequest, userID string)) *GroupService_JoinGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*dto.GroupJoinRequest), args[2].(string))
	})
	return _c
}

func (_c *GroupService_JoinGroup_Call) Return(_a0 error) *GroupService_JoinGroup_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GroupService_JoinGroup_Call) RunAndReturn(run func(context.Context, *dto.GroupJoinRequest, string) error) *GroupService_JoinGroup_Call {
	_c.Call.Return(run)
	return _c
}

// ListGroups provides a mock function with given fields: ctx, req, userID
func (_m *GroupService) ListGroups(ctx context.Context, req *dto.GroupListRequest, userID string) (*dto.GroupListResponse, error) {
	ret := _m.Called(ctx, req, userID)

	if len(ret) == 0 {
		panic("no return value specified for ListGroups")
	}

	var r0 *dto.GroupListResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.GroupListRequest, string) (*dto.GroupListResponse, error)); ok {
		return rf(ctx, req, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dto.GroupListRequest, string) *dto.GroupListResponse); ok {
		r0 = rf(ctx, req, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.GroupListResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dto.GroupListRequest, string) error); ok {
		r1 = rf(ctx, req, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GroupService_ListGroups_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListGroups'
type GroupService_ListGroups_Call struct {
	*mock.Call
}

// ListGroups is a helper method to define mock.On call
//   - ctx context.Context
//   - req *dto.GroupListRequest
//   - userID string
func (_e *GroupService_Expecter) ListGroups(ctx interface{}, req interface{}, userID interface{}) *GroupService_ListGroups_Call {
	return &GroupService_ListGroups_Call{Call: _e.mock.On("ListGroups", ctx, req, userID)}
}

func (_c *GroupService_ListGroups_Call) Run(run func(ctx context.Context, req *dto.GroupListRequest, userID string)) *GroupService_ListGroups_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*dto.GroupListRequest), args[2].(string))
	})
	return _c
}

func (_c *GroupService_ListGroups_Call) Return(_a0 *dto.GroupListResponse, _a1 error) *GroupService_ListGroups_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GroupService_ListGroups_Call) RunAndReturn(run func(context.Context, *dto.GroupListRequest, string) (*dto.GroupListResponse, error)) *GroupService_ListGroups_Call {
	_c.Call.Return(run)
	return _c
}

// ListMembers provides a mock function with given fields: ctx, groupID, page, size
func (_m *GroupService) ListMembers(ctx context.Context, groupID string, page int, size int) (*dto.GroupMemberListResponse, error) {
	ret := _m.Called(ctx, groupID, page, size)

	if len(ret) == 0 {
		panic("no return value specified for ListMembers")
	}

	var r0 *dto.GroupMemberListResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) (*dto.GroupMemberListResponse, error)); ok {
		return rf(ctx, groupID, page, size)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) *dto.GroupMemberListResponse); ok {
		r0 = rf(ctx, groupID, page, size)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.GroupMemberListResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int, int) error); ok {
		r1 = rf(ctx, groupID, page, size)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GroupService_ListMembers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListMembers'
type GroupService_ListMembers_Call struct {
	*mock.Call
}

// ListMembers is a helper method to define mock.On call
//   - ctx context.Context
//   - groupID string
//   - page int
//   - size int
func (_e *GroupService_Expecter) ListMembers(ctx interface{}, groupID interface{}, page interface{}, size interface{}) *GroupService_ListMembers_Call {
	return &GroupService_ListMembers_Call{Call: _e.mock.On("ListMembers", ctx, groupID, page, size)}
}

func (_c *GroupService_ListMembers_Call) Run(run func(ctx context.Context, groupID string, page int, size int)) *GroupService_ListMembers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int), args[3].(int))
	})
	return _c
}

func (_c *GroupService_ListMembers_Call) Return(_a0 *dto.GroupMemberListResponse, _a1 error) *GroupService_ListMembers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GroupService_ListMembers_Call) RunAndReturn(run func(context.Context, string, int, int) (*dto.GroupMemberListResponse, error)) *GroupService_ListMembers_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveMember provides a mock function with given fields: ctx, groupID, userID, operatorID
func (_m *GroupService) RemoveMember(ctx context.Context, groupID string, userID string, operatorID string) error {
	ret := _m.Called(ctx, groupID, userID, operatorID)

	if len(ret) == 0 {
		panic("no return value specified for RemoveMember")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, groupID, userID, operatorID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GroupService_RemoveMember_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveMember'
type GroupService_RemoveMember_Call struct {
	*mock.Call
}

// RemoveMember is a helper method to define mock.On call
//   - ctx context.Context
//   - groupID string
//   - userID string
//   - operatorID string
func (_e *GroupService_Expecter) RemoveMember(ctx interface{}, groupID interface{}, userID interface{}, operatorID interface{}) *GroupService_RemoveMember_Call {
	return &GroupService_RemoveMember_Call{Call: _e.mock.On("RemoveMember", ctx, groupID, userID, operatorID)}
}

func (_c *GroupService_RemoveMember_Call) Run(run func(ctx context.Context, groupID string, userID string, operatorID string)) *GroupService_RemoveMember_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *GroupService_RemoveMember_Call) Return(_a0 error) *GroupService_RemoveMember_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GroupService_RemoveMember_Call) RunAndReturn(run func(context.Context, string, string, string) error) *GroupService_RemoveMember_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateGroup provides a mock function with given fields: ctx, req, updaterID
func (_m *GroupService) UpdateGroup(ctx context.Context, req *dto.GroupUpdateRequest, updaterID string) error {
	ret := _m.Called(ctx, req, updaterID)

	if len(ret) == 0 {
		panic("no return value specified for UpdateGroup")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.GroupUpdateRequest, string) error); ok {
		r0 = rf(ctx, req, updaterID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GroupService_UpdateGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateGroup'
type GroupService_UpdateGroup_Call struct {
	*mock.Call
}

// UpdateGroup is a helper method to define mock.On call
//   - ctx context.Context
//   - req *dto.GroupUpdateRequest
//   - updaterID string
func (_e *GroupService_Expecter) UpdateGroup(ctx interface{}, req interface{}, updaterID interface{}) *GroupService_UpdateGroup_Call {
	return &GroupService_UpdateGroup_Call{Call: _e.mock.On("UpdateGroup", ctx, req, updaterID)}
}

func (_c *GroupService_UpdateGroup_Call) Run(run func(ctx context.Context, req *dto.GroupUpdateRequest, updaterID string)) *GroupService_UpdateGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*dto.GroupUpdateRequest), args[2].(string))
	})
	return _c
}

func (_c *GroupService_UpdateGroup_Call) Return(_a0 error) *GroupService_UpdateGroup_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GroupService_UpdateGroup_Call) RunAndReturn(run func(context.Context, *dto.GroupUpdateRequest, string) error) *GroupService_UpdateGroup_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateMemberRole provides a mock function with given fields: ctx, groupID, req, operatorID
func (_m *GroupService) UpdateMemberRole(ctx context.Context, groupID string, req *dto.GroupMemberUpdateRequest, operatorID string) error {
	ret := _m.Called(ctx, groupID, req, operatorID)

	if len(ret) == 0 {
		panic("no return value specified for UpdateMemberRole")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *dto.GroupMemberUpdateRequest, string) error); ok {
		r0 = rf(ctx, groupID, req, operatorID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GroupService_UpdateMemberRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateMemberRole'
type GroupService_UpdateMemberRole_Call struct {
	*mock.Call
}

// UpdateMemberRole is a helper method to define mock.On call
//   - ctx context.Context
//   - groupID string
//   - req *dto.GroupMemberUpdateRequest
//   - operatorID string
func (_e *GroupService_Expecter) UpdateMemberRole(ctx interface{}, groupID interface{}, req interface{}, operatorID interface{}) *GroupService_UpdateMemberRole_Call {
	return &GroupService_UpdateMemberRole_Call{Call: _e.mock.On("UpdateMemberRole", ctx, groupID, req, operatorID)}
}

func (_c *GroupService_UpdateMemberRole_Call) Run(run func(ctx context.Context, groupID string, req *dto.GroupMemberUpdateRequest, operatorID string)) *GroupService_UpdateMemberRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*dto.GroupMemberUpdateRequest), args[3].(string))
	})
	return _c
}

func (_c *GroupService_UpdateMemberRole_Call) Return(_a0 error) *GroupService_UpdateMemberRole_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GroupService_UpdateMemberRole_Call) RunAndReturn(run func(context.Context, string, *dto.GroupMemberUpdateRequest, string) error) *GroupService_UpdateMemberRole_Call {
	_c.Call.Return(run)
	return _c
}

// NewGroupService creates a new instance of GroupService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGroupService(t interface {
	mock.TestingT
	Cleanup(func())
}) *GroupService {
	mock := &GroupService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
