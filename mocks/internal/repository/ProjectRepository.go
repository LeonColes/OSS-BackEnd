// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"
	dto "oss-backend/internal/model/dto"
	entity "oss-backend/internal/model/entity"

	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"

	repository "oss-backend/internal/repository"
)

// ProjectRepository is an autogenerated mock type for the ProjectRepository type
type ProjectRepository struct {
	mock.Mock
}

type ProjectRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *ProjectRepository) EXPECT() *ProjectRepository_Expecter {
	return &ProjectRepository_Expecter{mock: &_m.Mock}
}

// AddProjectPermission provides a mock function with given fields: ctx, permission
func (_m *ProjectRepository) AddProjectPermission(ctx context.Context, permission *entity.Permission) error {
	ret := _m.Called(ctx, permission)

	if len(ret) == 0 {
		panic("no return value specified for AddProjectPermission")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Permission) error); ok {
		r0 = rf(ctx, permission)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ProjectRepository_AddProjectPermission_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddProjectPermission'
type ProjectRepository_AddProjectPermission_Call struct {
	*mock.Call
}

// AddProjectPermission is a helper method to define mock.On call
//   - ctx context.Context
//   - permission *entity.Permission
func (_e *ProjectRepository_Expecter) AddProjectPermission(ctx interface{}, permission interface{}) *ProjectRepository_AddProjectPermission_Call {
	return &ProjectRepository_AddProjectPermission_Call{Call: _e.mock.On("AddProjectPermission", ctx, permission)}
}

func (_c *ProjectRepository_AddProjectPermission_Call) Run(run func(ctx context.Context, permission *entity.Permission)) *ProjectRepository_AddProjectPermission_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entity.Permission))
	})
	return _c
}

func (_c *ProjectRepository_AddProjectPermission_Call) Return(_a0 error) *ProjectRepository_AddProjectPermission_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProjectRepository_AddProjectPermission_Call) RunAndReturn(run func(context.Context, *entity.Permission) error) *ProjectRepository_AddProjectPermission_Call {
	_c.Call.Return(run)
	return _c
}

// CheckUserInProject provides a mock function with given fields: ctx, userID, projectID
func (_m *ProjectRepository) CheckUserInProject(ctx context.Context, userID string, projectID string) (bool, error) {
	ret := _m.Called(ctx, userID, projectID)

	if len(ret) == 0 {
		panic("no return value specified for CheckUserInProject")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (bool, error)); ok {
		return rf(ctx, userID, projectID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) bool); ok {
		r0 = rf(ctx, userID, projectID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, userID, projectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProjectRepository_CheckUserInProject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckUserInProject'
type ProjectRepository_CheckUserInProject_Call struct {
	*mock.Call
}

// CheckUserInProject is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
//   - projectID string
func (_e *ProjectRepository_Expecter) CheckUserInProject(ctx interface{}, userID interface{}, projectID interface{}) *ProjectRepository_CheckUserInProject_Call {
	return &ProjectRepository_CheckUserInProject_Call{Call: _e.mock.On("CheckUserInProject", ctx, userID, projectID)}
}

func (_c *ProjectRepository_CheckUserInProject_Call) Run(run func(ctx context.Context, userID string, projectID string)) *ProjectRepository_CheckUserInProject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *ProjectRepository_CheckUserInProject_Call) Return(_a0 bool, _a1 error) *ProjectRepository_CheckUserInProject_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProjectRepository_CheckUserInProject_Call) RunAndReturn(run func(context.Context, string, string) (bool, error)) *ProjectRepository_CheckUserInProject_Call {
	_c.Call.Return(run)
	return _c
}

// CheckUserProjectRole provides a mock function with given fields: ctx, userID, projectID, role
func (_m *ProjectRepository) CheckUserProjectRole(ctx context.Context, userID string, projectID string, role string) (bool, error) {
	ret := _m.Called(ctx, userID, projectID, role)

	if len(ret) == 0 {
		panic("no return value specified for CheckUserProjectRole")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (bool, error)); ok {
		return rf(ctx, userID, projectID, role)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) bool); ok {
		r0 = rf(ctx, userID, projectID, role)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, userID, projectID, role)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProjectRepository_CheckUserProjectRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckUserProjectRole'
type ProjectRepository_CheckUserProjectRole_Call struct {
	*mock.Call
}

// CheckUserProjectRole is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
//   - projectID string
//   - role string
func (_e *ProjectRepository_Expecter) CheckUserProjectRole(ctx interface{}, userID interface{}, projectID interface{}, role interface{}) *ProjectRepository_CheckUserProjectRole_Call {
	return &ProjectRepository_CheckUserProjectRole_Call{Call: _e.mock.On("CheckUserProjectRole", ctx, userID, projectID, role)}
}

func (_c *ProjectRepository_CheckUserProjectRole_Call) Run(run func(ctx context.Context, userID string, projectID string, role string)) *ProjectRepository_CheckUserProjectRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *ProjectRepository_CheckUserProjectRole_Call) Return(_a0 bool, _a1 error) *ProjectRepository_CheckUserProjectRole_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProjectRepository_CheckUserProjectRole_Call) RunAndReturn(run func(context.Context, string, string, string) (bool, error)) *ProjectRepository_CheckUserProjectRole_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function with given fields: ctx, project
func (_m *ProjectRepository) Create(ctx context.Context, project *entity.Project) error {
	ret := _m.Called(ctx, project)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Project) error); ok {
		r0 = rf(ctx, project)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ProjectRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type ProjectRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - project *entity.Project
func (_e *ProjectRepository_Expecter) Create(ctx interface{}, project interface{}) *ProjectRepository_Create_Call {
	return &ProjectRepository_Create_Call{Call: _e.mock.On("Create", ctx, project)}
}

func (_c *ProjectRepository_Create_Call) Run(run func(ctx context.Context, project *entity.Project)) *ProjectRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entity.Project))
	})
	return _c
}

func (_c *ProjectRepository_Create_Call) Return(_a0 error) *ProjectRepository_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProjectRepository_Create_Call) RunAndReturn(run func(context.Context, *entity.Project) error) *ProjectRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// CreateProjectMember provides a mock function with given fields: ctx, member
func (_m *ProjectRepository) CreateProjectMember(ctx context.Context, member *entity.ProjectMember) error {
	ret := _m.Called(ctx, member)

	if len(ret) == 0 {
		panic("no return value specified for CreateProjectMember")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.ProjectMember) error); ok {
		r0 = rf(ctx, member)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ProjectRepository_CreateProjectMember_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateProjectMember'
type ProjectRepository_CreateProjectMember_Call struct {
	*mock.Call
}

// CreateProjectMember is a helper method to define mock.On call
//   - ctx context.Context
//   - member *entity.ProjectMember
func (_e *ProjectRepository_Expecter) CreateProjectMember(ctx interface{}, member interface{}) *ProjectRepository_CreateProjectMember_Call {
	return &ProjectRepository_CreateProjectMember_Call{Call: _e.mock.On("CreateProjectMember", ctx, member)}
}

func (_c *ProjectRepository_CreateProjectMember_Call) Run(run func(ctx context.Context, member *entity.ProjectMember)) *ProjectRepository_CreateProjectMember_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entity.ProjectMember))
	})
	return _c
}

func (_c *ProjectRepository_CreateProjectMember_Call) Return(_a0 error) *ProjectRepository_CreateProjectMember_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProjectRepository_CreateProjectMember_Call) RunAndReturn(run func(context.Context, *entity.ProjectMember) error) *ProjectRepository_CreateProjectMember_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, id
func (_m *ProjectRepository) Delete(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ProjectRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type ProjectRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *ProjectRepository_Expecter) Delete(ctx interface{}, id interface{}) *ProjectRepository_Delete_Call {
	return &ProjectRepository_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *ProjectRepository_Delete_Call) Run(run func(ctx context.Context, id string)) *ProjectRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ProjectRepository_Delete_Call) Return(_a0 error) *ProjectRepository_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProjectRepository_Delete_Call) RunAndReturn(run func(context.Context, string) error) *ProjectRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetByGroupID provides a mock function with given fields: ctx, groupID
func (_m *ProjectRepository) GetByGroupID(ctx context.Context, groupID string) ([]entity.Project, error) {
	ret := _m.Called(ctx, groupID)

	if len(ret) == 0 {
		panic("no return value specified for GetByGroupID")
	}

	var r0 []entity.Project
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]entity.Project, error)); ok {
		return rf(ctx, groupID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []entity.Project); ok {
		r0 = rf(ctx, groupID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Project)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, groupID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProjectRepository_GetByGroupID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByGroupID'
type ProjectRepository_GetByGroupID_Call struct {
	*mock.Call
}

// GetByGroupID is a helper method to define mock.On call
//   - ctx context.Context
//   - groupID string
func (_e *ProjectRepository_Expecter) GetByGroupID(ctx interface{}, groupID interface{}) *ProjectRepository_GetByGroupID_Call {
	return &ProjectRepository_GetByGroupID_Call{Call: _e.mock.On("GetByGroupID", ctx, groupID)}
}

func (_c *ProjectRepository_GetByGroupID_Call) Run(run func(ctx context.Context, groupID string)) *ProjectRepository_GetByGroupID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ProjectRepository_GetByGroupID_Call) Return(_a0 []entity.Project, _a1 error) *ProjectRepository_GetByGroupID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProjectRepository_GetByGroupID_Call) RunAndReturn(run func(context.Context, string) ([]entity.Project, error)) *ProjectRepository_GetByGroupID_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *ProjectRepository) GetByID(ctx context.Context, id string) (*entity.Project, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *entity.Project
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*entity.Project, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *entity.Project); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Project)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProjectRepository_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type ProjectRepository_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *ProjectRepository_Expecter) GetByID(ctx interface{}, id interface{}) *ProjectRepository_GetByID_Call {
	return &ProjectRepository_GetByID_Call{Call: _e.mock.On("GetByID", ctx, id)}
}

func (_c *ProjectRepository_GetByID_Call) Run(run func(ctx context.Context, id string)) *ProjectRepository_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ProjectRepository_GetByID_Call) Return(_a0 *entity.Project, _a1 error) *ProjectRepository_GetByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProjectRepository_GetByID_Call) RunAndReturn(run func(context.Context, string) (*entity.Project, error)) *ProjectRepository_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetProjectMember provides a mock function with given fields: ctx, projectID, userID
func (_m *ProjectRepository) GetProjectMember(ctx context.Context, projectID string, userID string) (*entity.ProjectMember, error) {
	ret := _m.Called(ctx, projectID, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetProjectMember")
	}

	var r0 *entity.ProjectMember
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*entity.ProjectMember, error)); ok {
		return rf(ctx, projectID, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *entity.ProjectMember); ok {
		r0 = rf(ctx, projectID, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.ProjectMember)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, projectID, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProjectRepository_GetProjectMember_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProjectMember'
type ProjectRepository_GetProjectMember_Call struct {
	*mock.Call
}

// GetProjectMember is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID string
//   - userID string
func (_e *ProjectRepository_Expecter) GetProjectMember(ctx interface{}, projectID interface{}, userID interface{}) *ProjectRepository_GetProjectMember_Call {
	return &ProjectRepository_GetProjectMember_Call{Call: _e.mock.On("GetProjectMember", ctx, projectID, userID)}
}

func (_c *ProjectRepository_GetProjectMember_Call) Run(run func(ctx context.Context, projectID string, userID string)) *ProjectRepository_GetProjectMember_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *ProjectRepository_GetProjectMember_Call) Return(_a0 *entity.ProjectMember, _a1 error) *ProjectRepository_GetProjectMember_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProjectRepository_GetProjectMember_Call) RunAndReturn(run func(context.Context, string, string) (*entity.ProjectMember, error)) *ProjectRepository_GetProjectMember_Call {
	_c.Call.Return(run)
	return _c
}

// GetProjectPermission provides a mock function with given fields: ctx, projectID, userID
func (_m *ProjectRepository) GetProjectPermission(ctx context.Context, projectID string, userID string) (*entity.Permission, error) {
	ret := _m.Called(ctx, projectID, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetProjectPermission")
	}

	var r0 *entity.Permission
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*entity.Permission, error)); ok {
		return rf(ctx, projectID, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *entity.Permission); ok {
		r0 = rf(ctx, projectID, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Permission)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, projectID, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProjectRepository_GetProjectPermission_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProjectPermission'
type ProjectRepository_GetProjectPermission_Call struct {
	*mock.Call
}

// GetProjectPermission is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID string
//   - userID string
func (_e *ProjectRepository_Expecter) GetProjectPermission(ctx interface{}, projectID interface{}, userID interface{}) *ProjectRepository_GetProjectPermission_Call {
	return &ProjectRepository_GetProjectPermission_Call{Call: _e.mock.On("GetProjectPermission", ctx, projectID, userID)}
}

func (_c *ProjectRepository_GetProjectPermission_Call) Run(run func(ctx context.Context, projectID string, userID string)) *ProjectRepository_GetProjectPermission_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *ProjectRepository_GetProjectPermission_Call) Return(_a0 *entity.Permission, _a1 error) *ProjectRepository_GetProjectPermission_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProjectRepository_GetProjectPermission_Call) RunAndReturn(run func(context.Context, string, string) (*entity.Permission, error)) *ProjectRepository_GetProjectPermission_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserProjects provides a mock function with given fields: ctx, userID
func (_m *ProjectRepository) GetUserProjects(ctx context.Context, userID string) ([]entity.Project, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserProjects")
	}

	var r0 []entity.Project
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]entity.Project, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []entity.Project); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Project)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProjectRepository_GetUserProjects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserProjects'
type ProjectRepository_GetUserProjects_Call struct {
	*mock.Call
}

// GetUserProjects is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
func (_e *ProjectRepository_Expecter) GetUserProjects(ctx interface{}, userID interface{}) *ProjectRepository_GetUserProjects_Call {
	return &ProjectRepository_GetUserProjects_Call{Call: _e.mock.On("GetUserProjects", ctx, userID)}
}

func (_c *ProjectRepository_GetUserProjects_Call) Run(run func(ctx context.Context, userID string)) *ProjectRepository_GetUserProjects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ProjectRepository_GetUserProjects_Call) Return(_a0 []entity.Project, _a1 error) *ProjectRepository_GetUserProjects_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProjectRepository_GetUserProjects_Call) RunAndReturn(run func(context.Context, string) ([]entity.Project, error)) *ProjectRepository_GetUserProjects_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx, req
func (_m *ProjectRepository) List(ctx context.Context, req *dto.ProjectListRequest) ([]entity.Project, int64, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []entity.Project
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.ProjectListRequest) ([]entity.Project, int64, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dto.ProjectListRequest) []entity.Project); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Project)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dto.ProjectListRequest) int64); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(context.Context, *dto.ProjectListRequest) error); ok {
		r2 = rf(ctx, req)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ProjectRepository_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type ProjectRepository_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - req *dto.ProjectListRequest
func (_e *ProjectRepository_Expecter) List(ctx interface{}, req interface{}) *ProjectRepository_List_Call {
	return &ProjectRepository_List_Call{Call: _e.mock.On("List", ctx, req)}
}

func (_c *ProjectRepository_List_Call) Run(run func(ctx context.Context, req *dto.ProjectListRequest)) *ProjectRepository_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*dto.ProjectListRequest))
	})
	return _c
}

func (_c *ProjectRepository_List_Call) Return(_a0 []entity.Project, _a1 int64, _a2 error) *ProjectRepository_List_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ProjectRepository_List_Call) RunAndReturn(run func(context.Context, *dto.ProjectListRequest) ([]entity.Project, int64, error)) *ProjectRepository_List_Call {
	_c.Call.Return(run)
	return _c
}

// ListProjectMembers provides a mock function with given fields: ctx, projectID, page, size
func (_m *ProjectRepository) ListProjectMembers(ctx context.Context, projectID string, page int, size int) ([]entity.ProjectMember, int64, error) {
	ret := _m.Called(ctx, projectID, page, size)

	if len(ret) == 0 {
		panic("no return value specified for ListProjectMembers")
	}

	var r0 []entity.ProjectMember
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) ([]entity.ProjectMember, int64, error)); ok {
		return rf(ctx, projectID, page, size)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) []entity.ProjectMember); ok {
		r0 = rf(ctx, projectID, page, size)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.ProjectMember)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int, int) int64); ok {
		r1 = rf(ctx, projectID, page, size)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, int, int) error); ok {
		r2 = rf(ctx, projectID, page, size)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ProjectRepository_ListProjectMembers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListProjectMembers'
type ProjectRepository_ListProjectMembers_Call struct {
	*mock.Call
}

// ListProjectMembers is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID string
//   - page int
//   - size int
func (_e *ProjectRepository_Expecter) ListProjectMembers(ctx interface{}, projectID interface{}, page interface{}, size interface{}) *ProjectRepository_ListProjectMembers_Call {
	return &ProjectRepository_ListProjectMembers_Call{Call: _e.mock.On("ListProjectMembers", ctx, projectID, page, size)}
}

func (_c *ProjectRepository_ListProjectMembers_Call) Run(run func(ctx context.Context, projectID string, page int, size int)) *ProjectRepository_ListProjectMembers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int), args[3].(int))
	})
	return _c
}

func (_c *ProjectRepository_ListProjectMembers_Call) Return(_a0 []entity.ProjectMember, _a1 int64, _a2 error) *ProjectRepository_ListProjectMembers_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ProjectRepository_ListProjectMembers_Call) RunAndReturn(run func(context.Context, string, int, int) ([]entity.ProjectMember, int64, error)) *ProjectRepository_ListProjectMembers_Call {
	_c.Call.Return(run)
	return _c
}

// ListProjectPermissions provides a mock function with given fields: ctx, projectID, page, size
func (_m *ProjectRepository) ListProjectPermissions(ctx context.Context, projectID string, page int, size int) ([]entity.Permission, int64, error) {
	ret := _m.Called(ctx, projectID, page, size)

	if len(ret) == 0 {
		panic("no return value specified for ListProjectPermissions")
	}

	var r0 []entity.Permission
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) ([]entity.Permission, int64, error)); ok {
		return rf(ctx, projectID, page, size)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) []entity.Permission); ok {
		r0 = rf(ctx, projectID, page, size)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Permission)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int, int) int64); ok {
		r1 = rf(ctx, projectID, page, size)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, int, int) error); ok {
		r2 = rf(ctx, projectID, page, size)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ProjectRepository_ListProjectPermissions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListProjectPermissions'
type ProjectRepository_ListProjectPermissions_Call struct {
	*mock.Call
}

// ListProjectPermissions is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID string
//   - page int
//   - size int
func (_e *ProjectRepository_Expecter) ListProjectPermissions(ctx interface{}, projectID interface{}, page interface{}, size interface{}) *ProjectRepository_ListProjectPermissions_Call {
	return &ProjectRepository_ListProjectPermissions_Call{Call: _e.mock.On("ListProjectPermissions", ctx, projectID, page, size)}
}

func (_c *ProjectRepository_ListProjectPermissions_Call) Run(run func(ctx context.Context, projectID string, page int, size int)) *ProjectRepository_ListProjectPermissions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int), args[3].(int))
	})
	return _c
}

func (_c *ProjectRepository_ListProjectPermissions_Call) Return(_a0 []entity.Permission, _a1 int64, _a2 error) *ProjectRepository_ListProjectPermissions_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ProjectRepository_ListProjectPermissions_Call) RunAndReturn(run func(context.Context, string, int, int) ([]entity.Permission, int64, error)) *ProjectRepository_ListProjectPermissions_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveProjectMember provides a mock function with given fields: ctx, projectID, userID
func (_m *ProjectRepository) RemoveProjectMember(ctx context.Context, projectID string, userID string) error {
	ret := _m.Called(ctx, projectID, userID)

	if len(ret) == 0 {
		panic("no return value specified for RemoveProjectMember")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, projectID, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ProjectRepository_RemoveProjectMember_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveProjectMember'
type ProjectRepository_RemoveProjectMember_Call struct {
	*mock.Call
}

// RemoveProjectMember is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID string
//   - userID string
func (_e *ProjectRepository_Expecter) RemoveProjectMember(ctx interface{}, projectID interface{}, userID interface{}) *ProjectRepository_RemoveProjectMember_Call {
	return &ProjectRepository_RemoveProjectMember_Call{Call: _e.mock.On("RemoveProjectMember", ctx, projectID, userID)}
}

func (_c *ProjectRepository_RemoveProjectMember_Call) Run(run func(ctx context.Context, projectID string, userID string)) *ProjectRepository_RemoveProjectMember_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *ProjectRepository_RemoveProjectMember_Call) Return(_a0 error) *ProjectRepository_RemoveProjectMember_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProjectRepository_RemoveProjectMember_Call) RunAndReturn(run func(context.Context, string, string) error) *ProjectRepository_RemoveProjectMember_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveProjectPermission provides a mock function with given fields: ctx, projectID, userID
func (_m *ProjectRepository) RemoveProjectPermission(ctx context.Context, projectID string, userID string) error {
	ret := _m.Called(ctx, projectID, userID)

	if len(ret) == 0 {
		panic("no return value specified for RemoveProjectPermission")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, projectID, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ProjectRepository_RemoveProjectPermission_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveProjectPermission'
type ProjectRepository_RemoveProjectPermission_Call struct {
	*mock.Call
}

// RemoveProjectPermission is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID string
//   - userID string
func (_e *ProjectRepository_Expecter) RemoveProjectPermission(ctx interface{}, projectID interface{}, userID interface{}) *ProjectRepository_RemoveProjectPermission_Call {
	return &ProjectRepository_RemoveProjectPermission_Call{Call: _e.mock.On("RemoveProjectPermission", ctx, projectID, userID)}
}

func (_c *ProjectRepository_RemoveProjectPermission_Call) Run(run func(ctx context.Context, projectID string, userID string)) *ProjectRepository_RemoveProjectPermission_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *ProjectRepository_RemoveProjectPermission_Call) Return(_a0 error) *ProjectRepository_RemoveProjectPermission_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProjectRepository_RemoveProjectPermission_Call) RunAndReturn(run func(context.Context, string, string) error) *ProjectRepository_RemoveProjectPermission_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, project
func (_m *ProjectRepository) Update(ctx context.Context, project *entity.Project) error {
	ret := _m.Called(ctx, project)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Project) error); ok {
		r0 = rf(ctx, project)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ProjectRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type ProjectRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - project *entity.Project
func (_e *ProjectRepository_Expecter) Update(ctx interface{}, project interface{}) *ProjectRepository_Update_Call {
	return &ProjectRepository_Update_Call{Call: _e.mock.On("Update", ctx, project)}
}

func (_c *ProjectRepository_Update_Call) Run(run func(ctx context.Context, project *entity.Project)) *ProjectRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entity.Project))
	})
	return _c
}

func (_c *ProjectRepository_Update_Call) Return(_a0 error) *ProjectRepository_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProjectRepository_Update_Call) RunAndReturn(run func(context.Context, *entity.Project) error) *ProjectRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateProjectMember provides a mock function with given fields: ctx, member
func (_m *ProjectRepository) UpdateProjectMember(ctx context.Context, member *entity.ProjectMember) error {
	ret := _m.Called(ctx, member)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProjectMember")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.ProjectMember) error); ok {
		r0 = rf(ctx, member)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ProjectRepository_UpdateProjectMember_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateProjectMember'
type ProjectRepository_UpdateProjectMember_Call struct {
	*mock.Call
}

// UpdateProjectMember is a helper method to define mock.On call
//   - ctx context.Context
//   - member *entity.ProjectMember
func (_e *ProjectRepository_Expecter) UpdateProjectMember(ctx interface{}, member interface{}) *ProjectRepository_UpdateProjectMember_Call {
	return &ProjectRepository_UpdateProjectMember_Call{Call: _e.mock.On("UpdateProjectMember", ctx, member)}
}

func (_c *ProjectRepository_UpdateProjectMember_Call) Run(run func(ctx context.Context, member *entity.ProjectMember)) *ProjectRepository_UpdateProjectMember_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entity.ProjectMember))
	})
	return _c
}

func (_c *ProjectRepository_UpdateProjectMember_Call) Return(_a0 error) *ProjectRepository_UpdateProjectMember_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProjectRepository_UpdateProjectMember_Call) RunAndReturn(run func(context.Context, *entity.ProjectMember) error) *ProjectRepository_UpdateProjectMember_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateProjectPermission provides a mock function with given fields: ctx, permission
func (_m *ProjectRepository) UpdateProjectPermission(ctx context.Context, permission *entity.Permission) error {
	ret := _m.Called(ctx, permission)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProjectPermission")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Permission) error); ok {
		r0 = rf(ctx, permission)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ProjectRepository_UpdateProjectPermission_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateProjectPermission'
type ProjectRepository_UpdateProjectPermission_Call struct {
	*mock.Call
}

// UpdateProjectPermission is a helper method to define mock.On call
//   - ctx context.Context
//   - permission *entity.Permission
func (_e *ProjectRepository_Expecter) UpdateProjectPermission(ctx interface{}, permission interface{}) *ProjectRepository_UpdateProjectPermission_Call {
	return &ProjectRepository_UpdateProjectPermission_Call{Call: _e.mock.On("UpdateProjectPermission", ctx, permission)}
}

func (_c *ProjectRepository_UpdateProjectPermission_Call) Run(run func(ctx context.Context, permission *entity.Permission)) *ProjectRepository_UpdateProjectPermission_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entity.Permission))
	})
	return _c
}

func (_c *ProjectRepository_UpdateProjectPermission_Call) Return(_a0 error) *ProjectRepository_UpdateProjectPermission_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProjectRepository_UpdateProjectPermission_Call) RunAndReturn(run func(context.Context, *entity.Permission) error) *ProjectRepository_UpdateProjectPermission_Call {
	_c.Call.Return(run)
	return _c
}

// WithTx provides a mock function with given fields: tx
func (_m *ProjectRepository) WithTx(tx *gorm.DB) repository.ProjectRepository {
	ret := _m.Called(tx)

	if len(ret) == 0 {
		panic("no return value specified for WithTx")
	}

	var r0 repository.ProjectRepository
	if rf, ok := ret.Get(0).(func(*gorm.DB) repository.ProjectRepository); ok {
		r0 = rf(tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(repository.ProjectRepository)
		}
	}

	return r0
}

// ProjectRepository_WithTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithTx'
type ProjectRepository_WithTx_Call struct {
	*mock.Call
}

// WithTx is a helper method to define mock.On call
//   - tx *gorm.DB
func (_e *ProjectRepository_Expecter) WithTx(tx interface{}) *ProjectRepository_WithTx_Call {
	return &ProjectRepository_WithTx_Call{Call: _e.mock.On("WithTx", tx)}
}

func (_c *ProjectRepository_WithTx_Call) Run(run func(tx *gorm.DB)) *ProjectRepository_WithTx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB))
	})
	return _c
}

func (_c *ProjectRepository_WithTx_Call) Return(_a0 repository.ProjectRepository) *ProjectRepository_WithTx_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProjectRepository_WithTx_Call) RunAndReturn(run func(*gorm.DB) repository.ProjectRepository) *ProjectRepository_WithTx_Call {
	_c.Call.Return(run)
	return _c
}

// NewProjectRepository creates a new instance of ProjectRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProjectRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProjectRepository {
	mock := &ProjectRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
