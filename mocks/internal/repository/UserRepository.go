// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"
	entity "oss-backend/internal/model/entity"

	mock "github.com/stretchr/testify/mock"
)

// UserRepository is an autogenerated mock type for the UserRepository type
type UserRepository struct {
	mock.Mock
}

type UserRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *UserRepository) EXPECT() *UserRepository_Expecter {
	return &UserRepository_Expecter{mock: &_m.Mock}
}

// AssignRoles provides a mock function with given fields: ctx, userID, roleIDs
func (_m *UserRepository) AssignRoles(ctx context.Context, userID string, roleIDs []uint) error {
	ret := _m.Called(ctx, userID, roleIDs)

	if len(ret) == 0 {
		panic("no return value specified for AssignRoles")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []uint) error); ok {
		r0 = rf(ctx, userID, roleIDs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserRepository_AssignRoles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AssignRoles'
type UserRepository_AssignRoles_Call struct {
	*mock.Call
}

// AssignRoles is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
//   - roleIDs []uint
func (_e *UserRepository_Expecter) AssignRoles(ctx interface{}, userID interface{}, roleIDs interface{}) *UserRepository_AssignRoles_Call {
	return &UserRepository_AssignRoles_Call{Call: _e.mock.On("AssignRoles", ctx, userID, roleIDs)}
}

func (_c *UserRepository_AssignRoles_Call) Run(run func(ctx context.Context, userID string, roleIDs []uint)) *UserRepository_AssignRoles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]uint))
	})
	return _c
}

func (_c *UserRepository_AssignRoles_Call) Return(_a0 error) *UserRepository_AssignRoles_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserRepository_AssignRoles_Call) RunAndReturn(run func(context.Context, string, []uint) error) *UserRepository_AssignRoles_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function with given fields: ctx, user
func (_m *UserRepository) Create(ctx context.Context, user *entity.User) error {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.User) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type UserRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - user *entity.User
func (_e *UserRepository_Expecter) Create(ctx interface{}, user interface{}) *UserRepository_Create_Call {
	return &UserRepository_Create_Call{Call: _e.mock.On("Create", ctx, user)}
}

func (_c *UserRepository_Create_Call) Run(run func(ctx context.Context, user *entity.User)) *UserRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entity.User))
	})
	return _c
}

func (_c *UserRepository_Create_Call) Return(_a0 error) *UserRepository_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserRepository_Create_Call) RunAndReturn(run func(context.Context, *entity.User) error) *UserRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// GetByEmail provides a mock function with given fields: ctx, email
func (_m *UserRepository) GetByEmail(ctx context.Context, email string) (*entity.User, error) {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for GetByEmail")
	}

	var r0 *entity.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*entity.User, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *entity.User); ok {
		r0 = rf(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserRepository_GetByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByEmail'
type UserRepository_GetByEmail_Call struct {
	*mock.Call
}

// GetByEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
func (_e *UserRepository_Expecter) GetByEmail(ctx interface{}, email interface{}) *UserRepository_GetByEmail_Call {
	return &UserRepository_GetByEmail_Call{Call: _e.mock.On("GetByEmail", ctx, email)}
}

func (_c *UserRepository_GetByEmail_Call) Run(run func(ctx context.Context, email string)) *UserRepository_GetByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UserRepository_GetByEmail_Call) Return(_a0 *entity.User, _a1 error) *UserRepository_GetByEmail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserRepository_GetByEmail_Call) RunAndReturn(run func(context.Context, string) (*entity.User, error)) *UserRepository_GetByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *UserRepository) GetByID(ctx context.Context, id string) (*entity.User, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *entity.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*entity.User, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *entity.User); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserRepository_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type UserRepository_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *UserRepository_Expecter) GetByID(ctx interface{}, id interface{}) *UserRepository_GetByID_Call {
	return &UserRepository_GetByID_Call{Call: _e.mock.On("GetByID", ctx, id)}
}

func (_c *UserRepository_GetByID_Call) Run(run func(ctx context.Context, id string)) *UserRepository_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UserRepository_GetByID_Call) Return(_a0 *entity.User, _a1 error) *UserRepository_GetByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserRepository_GetByID_Call) RunAndReturn(run func(context.Context, string) (*entity.User, error)) *UserRepository_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserRoles provides a mock function with given fields: ctx, userID
func (_m *UserRepository) GetUserRoles(ctx context.Context, userID string) ([]entity.Role, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserRoles")
	}

	var r0 []entity.Role
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]entity.Role, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []entity.Role); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Role)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserRepository_GetUserRoles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserRoles'
type UserRepository_GetUserRoles_Call struct {
	*mock.Call
}

// GetUserRoles is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
func (_e *UserRepository_Expecter) GetUserRoles(ctx interface{}, userID interface{}) *UserRepository_GetUserRoles_Call {
	return &UserRepository_GetUserRoles_Call{Call: _e.mock.On("GetUserRoles", ctx, userID)}
}

func (_c *UserRepository_GetUserRoles_Call) Run(run func(ctx context.Context, userID string)) *UserRepository_GetUserRoles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UserRepository_GetUserRoles_Call) Return(_a0 []entity.Role, _a1 error) *UserRepository_GetUserRoles_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserRepository_GetUserRoles_Call) RunAndReturn(run func(context.Context, string) ([]entity.Role, error)) *UserRepository_GetUserRoles_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx, email, name, status, page, size
func (_m *UserRepository) List(ctx context.Context, email string, name string, status int, page int, size int) ([]*entity.User, int64, error) {
	ret := _m.Called(ctx, email, name, status, page, size)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []*entity.User
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int, int, int) ([]*entity.User, int64, error)); ok {
		return rf(ctx, email, name, status, page, size)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int, int, int) []*entity.User); ok {
		r0 = rf(ctx, email, name, status, page, size)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, int, int, int) int64); ok {
		r1 = rf(ctx, email, name, status, page, size)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, string, int, int, int) error); ok {
		r2 = rf(ctx, email, name, status, page, size)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UserRepository_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type UserRepository_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
//   - name string
//   - status int
//   - page int
//   - size int
func (_e *UserRepository_Expecter) List(ctx interface{}, email interface{}, name interface{}, status interface{}, page interface{}, size interface{}) *UserRepository_List_Call {
	return &UserRepository_List_Call{Call: _e.mock.On("List", ctx, email, name, status, page, size)}
}

func (_c *UserRepository_List_Call) Run(run func(ctx context.Context, email string, name string, status int, page int, size int)) *UserRepository_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(int), args[4].(int), args[5].(int))
	})
	return _c
}

func (_c *UserRepository_List_Call) Return(_a0 []*entity.User, _a1 int64, _a2 error) *UserRepository_List_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *UserRepository_List_Call) RunAndReturn(run func(context.Context, string, string, int, int, int) ([]*entity.User, int64, error)) *UserRepository_List_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveRoles provides a mock function with given fields: ctx, userID, roleIDs
func (_m *UserRepository) RemoveRoles(ctx context.Context, userID string, roleIDs []uint) error {
	ret := _m.Called(ctx, userID, roleIDs)

	if len(ret) == 0 {
		panic("no return value specified for RemoveRoles")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []uint) error); ok {
		r0 = rf(ctx, userID, roleIDs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserRepository_RemoveRoles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveRoles'
type UserRepository_RemoveRoles_Call struct {
	*mock.Call
}

// RemoveRoles is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
//   - roleIDs []uint
func (_e *UserRepository_Expecter) RemoveRoles(ctx interface{}, userID interface{}, roleIDs interface{}) *UserRepository_RemoveRoles_Call {
	return &UserRepository_RemoveRoles_Call{Call: _e.mock.On("RemoveRoles", ctx, userID, roleIDs)}
}

func (_c *UserRepository_RemoveRoles_Call) Run(run func(ctx context.Context, userID string, roleIDs []uint)) *UserRepository_RemoveRoles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]uint))
	})
	return _c
}

func (_c *UserRepository_RemoveRoles_Call) Return(_a0 error) *UserRepository_RemoveRoles_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserRepository_RemoveRoles_Call) RunAndReturn(run func(context.Context, string, []uint) error) *UserRepository_RemoveRoles_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, user
func (_m *UserRepository) Update(ctx context.Context, user *entity.User) error {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.User) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type UserRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - user *entity.User
func (_e *UserRepository_Expecter) Update(ctx interface{}, user interface{}) *UserRepository_Update_Call {
	return &UserRepository_Update_Call{Call: _e.mock.On("Update", ctx, user)}
}

func (_c *UserRepository_Update_Call) Run(run func(ctx context.Context, user *entity.User)) *UserRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entity.User))
	})
	return _c
}

func (_c *UserRepository_Update_Call) Return(_a0 error) *UserRepository_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserRepository_Update_Call) RunAndReturn(run func(context.Context, *entity.User) error) *UserRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateLastLogin provides a mock function with given fields: ctx, id, ip
func (_m *UserRepository) UpdateLastLogin(ctx context.Context, id string, ip string) error {
	ret := _m.Called(ctx, id, ip)

	if len(ret) == 0 {
		panic("no return value specified for UpdateLastLogin")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, id, ip)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserRepository_UpdateLastLogin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateLastLogin'
type UserRepository_UpdateLastLogin_Call struct {
	*mock.Call
}

// UpdateLastLogin is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - ip string
func (_e *UserRepository_Expecter) UpdateLastLogin(ctx interface{}, id interface{}, ip interface{}) *UserRepository_UpdateLastLogin_Call {
	return &UserRepository_UpdateLastLogin_Call{Call: _e.mock.On("UpdateLastLogin", ctx, id, ip)}
}

func (_c *UserRepository_UpdateLastLogin_Call) Run(run func(ctx context.Context, id string, ip string)) *UserRepository_UpdateLastLogin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *UserRepository_UpdateLastLogin_Call) Return(_a0 error) *UserRepository_UpdateLastLogin_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserRepository_UpdateLastLogin_Call) RunAndReturn(run func(context.Context, string, string) error) *UserRepository_UpdateLastLogin_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePassword provides a mock function with given fields: ctx, id, passwordHash
func (_m *UserRepository) UpdatePassword(ctx context.Context, id string, passwordHash string) error {
	ret := _m.Called(ctx, id, passwordHash)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePassword")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, id, passwordHash)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserRepository_UpdatePassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePassword'
type UserRepository_UpdatePassword_Call struct {
	*mock.Call
}

// UpdatePassword is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - passwordHash string
func (_e *UserRepository_Expecter) UpdatePassword(ctx interface{}, id interface{}, passwordHash interface{}) *UserRepository_UpdatePassword_Call {
	return &UserRepository_UpdatePassword_Call{Call: _e.mock.On("UpdatePassword", ctx, id, passwordHash)}
}

func (_c *UserRepository_UpdatePassword_Call) Run(run func(ctx context.Context, id string, passwordHash string)) *UserRepository_UpdatePassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *UserRepository_UpdatePassword_Call) Return(_a0 error) *UserRepository_UpdatePassword_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserRepository_UpdatePassword_Call) RunAndReturn(run func(context.Context, string, string) error) *UserRepository_UpdatePassword_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateStatus provides a mock function with given fields: ctx, id, status
func (_m *UserRepository) UpdateStatus(ctx context.Context, id string, status int) error {
	ret := _m.Called(ctx, id, status)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int) error); ok {
		r0 = rf(ctx, id, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserRepository_UpdateStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateStatus'
type UserRepository_UpdateStatus_Call struct {
	*mock.Call
}

// UpdateStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - status int
func (_e *UserRepository_Expecter) UpdateStatus(ctx interface{}, id interface{}, status interface{}) *UserRepository_UpdateStatus_Call {
	return &UserRepository_UpdateStatus_Call{Call: _e.mock.On("UpdateStatus", ctx, id, status)}
}

func (_c *UserRepository_UpdateStatus_Call) Run(run func(ctx context.Context, id string, status int)) *UserRepository_UpdateStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int))
	})
	return _c
}

func (_c *UserRepository_UpdateStatus_Call) Return(_a0 error) *UserRepository_UpdateStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserRepository_UpdateStatus_Call) RunAndReturn(run func(context.Context, string, int) error) *UserRepository_UpdateStatus_Call {
	_c.Call.Return(run)
	return _c
}

// NewUserRepository creates a new instance of UserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserRepository {
	mock := &UserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
