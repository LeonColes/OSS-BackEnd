// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	gorm "gorm.io/gorm"
)

// CasbinRepository is an autogenerated mock type for the CasbinRepository type
type CasbinRepository struct {
	mock.Mock
}

type CasbinRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *CasbinRepository) EXPECT() *CasbinRepository_Expecter {
	return &CasbinRepository_Expecter{mock: &_m.Mock}
}

// DeleteRoleRules provides a mock function with given fields: tx, roleCode
func (_m *CasbinRepository) DeleteRoleRules(tx *gorm.DB, roleCode string) error {
	ret := _m.Called(tx, roleCode)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRoleRules")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, string) error); ok {
		r0 = rf(tx, roleCode)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CasbinRepository_DeleteRoleRules_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteRoleRules'
type CasbinRepository_DeleteRoleRules_Call struct {
	*mock.Call
}

// DeleteRoleRules is a helper method to define mock.On call
//   - tx *gorm.DB
//   - roleCode string
func (_e *CasbinRepository_Expecter) DeleteRoleRules(tx interface{}, roleCode interface{}) *CasbinRepository_DeleteRoleRules_Call {
	return &CasbinRepository_DeleteRoleRules_Call{Call: _e.mock.On("DeleteRoleRules", tx, roleCode)}
}

func (_c *CasbinRepository_DeleteRoleRules_Call) Run(run func(tx *gorm.DB, roleCode string)) *CasbinRepository_DeleteRoleRules_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB), args[1].(string))
	})
	return _c
}

func (_c *CasbinRepository_DeleteRoleRules_Call) Return(_a0 error) *CasbinRepository_DeleteRoleRules_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CasbinRepository_DeleteRoleRules_Call) RunAndReturn(run func(*gorm.DB, string) error) *CasbinRepository_DeleteRoleRules_Call {
	_c.Call.Return(run)
	return _c
}

// NewCasbinRepository creates a new instance of CasbinRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCasbinRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *CasbinRepository {
	mock := &CasbinRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
