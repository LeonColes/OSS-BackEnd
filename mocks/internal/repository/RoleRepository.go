// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"
	entity "oss-backend/internal/model/entity"

	mock "github.com/stretchr/testify/mock"
)

// RoleRepository is an autogenerated mock type for the RoleRepository type
type RoleRepository struct {
	mock.Mock
}

type RoleRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *RoleRepository) EXPECT() *RoleRepository_Expecter {
	return &RoleRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, role
func (_m *RoleRepository) Create(ctx context.Context, role *entity.Role) error {
	ret := _m.Called(ctx, role)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Role) error); ok {
		r0 = rf(ctx, role)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RoleRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type RoleRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - role *entity.Role
func (_e *RoleRepository_Expecter) Create(ctx interface{}, role interface{}) *RoleRepository_Create_Call {
	return &RoleRepository_Create_Call{Call: _e.mock.On("Create", ctx, role)}
}

func (_c *RoleRepository_Create_Call) Run(run func(ctx context.Context, role *entity.Role)) *RoleRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entity.Role))
	})
	return _c
}

func (_c *RoleRepository_Create_Call) Return(_a0 error) *RoleRepository_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RoleRepository_Create_Call) RunAndReturn(run func(context.Context, *entity.Role) error) *RoleRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, id
func (_m *RoleRepository) Delete(ctx context.Context, id uint) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RoleRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type RoleRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id uint
func (_e *RoleRepository_Expecter) Delete(ctx interface{}, id interface{}) *RoleRepository_Delete_Call {
	return &RoleRepository_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *RoleRepository_Delete_Call) Run(run func(ctx context.Context, id uint)) *RoleRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint))
	})
	return _c
}

func (_c *RoleRepository_Delete_Call) Return(_a0 error) *RoleRepository_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RoleRepository_Delete_Call) RunAndReturn(run func(context.Context, uint) error) *RoleRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetAll provides a mock function with given fields: ctx
func (_m *RoleRepository) GetAll(ctx context.Context) ([]entity.Role, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []entity.Role
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]entity.Role, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []entity.Role); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Role)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RoleRepository_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type RoleRepository_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
//   - ctx context.Context
func (_e *RoleRepository_Expecter) GetAll(ctx interface{}) *RoleRepository_GetAll_Call {
	return &RoleRepository_GetAll_Call{Call: _e.mock.On("GetAll", ctx)}
}

func (_c *RoleRepository_GetAll_Call) Run(run func(ctx context.Context)) *RoleRepository_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *RoleRepository_GetAll_Call) Return(_a0 []entity.Role, _a1 error) *RoleRepository_GetAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RoleRepository_GetAll_Call) RunAndReturn(run func(context.Context) ([]entity.Role, error)) *RoleRepository_GetAll_Call {
	_c.Call.Return(run)
	return _c
}

// GetByCode provides a mock function with given fields: ctx, code
func (_m *RoleRepository) GetByCode(ctx context.Context, code string) (*entity.Role, error) {
	ret := _m.Called(ctx, code)

	if len(ret) == 0 {
		panic("no return value specified for GetByCode")
	}

	var r0 *entity.Role
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*entity.Role, error)); ok {
		return rf(ctx, code)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *entity.Role); ok {
		r0 = rf(ctx, code)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Role)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, code)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RoleRepository_GetByCode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByCode'
type RoleRepository_GetByCode_Call struct {
	*mock.Call
}

// GetByCode is a helper method to define mock.On call
//   - ctx context.Context
//   - code string
func (_e *RoleRepository_Expecter) GetByCode(ctx interface{}, code interface{}) *RoleRepository_GetByCode_Call {
	return &RoleRepository_GetByCode_Call{Call: _e.mock.On("GetByCode", ctx, code)}
}

func (_c *RoleRepository_GetByCode_Call) Run(run func(ctx context.Context, code string)) *RoleRepository_GetByCode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *RoleRepository_GetByCode_Call) Return(_a0 *entity.Role, _a1 error) *RoleRepository_GetByCode_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RoleRepository_GetByCode_Call) RunAndReturn(run func(context.Context, string) (*entity.Role, error)) *RoleRepository_GetByCode_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *RoleRepository) GetByID(ctx context.Context, id uint) (*entity.Role, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *entity.Role
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) (*entity.Role, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint) *entity.Role); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Role)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RoleRepository_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type RoleRepository_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id uint
func (_e *RoleRepository_Expecter) GetByID(ctx interface{}, id interface{}) *RoleRepository_GetByID_Call {
	return &RoleRepository_GetByID_Call{Call: _e.mock.On("GetByID", ctx, id)}
}

func (_c *RoleRepository_GetByID_Call) Run(run func(ctx context.Context, id uint)) *RoleRepository_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint))
	})
	return _c
}

func (_c *RoleRepository_GetByID_Call) Return(_a0 *entity.Role, _a1 error) *RoleRepository_GetByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RoleRepository_GetByID_Call) RunAndReturn(run func(context.Context, uint) (*entity.Role, error)) *RoleRepository_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// InitSystemRoles provides a mock function with given fields: ctx
func (_m *RoleRepository) InitSystemRoles(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for InitSystemRoles")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RoleRepository_InitSystemRoles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InitSystemRoles'
type RoleRepository_InitSystemRoles_Call struct {
	*mock.Call
}

// InitSystemRoles is a helper method to define mock.On call
//   - ctx context.Context
func (_e *RoleRepository_Expecter) InitSystemRoles(ctx interface{}) *RoleRepository_InitSystemRoles_Call {
	return &RoleRepository_InitSystemRoles_Call{Call: _e.mock.On("InitSystemRoles", ctx)}
}

func (_c *RoleRepository_InitSystemRoles_Call) Run(run func(ctx context.Context)) *RoleRepository_InitSystemRoles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *RoleRepository_InitSystemRoles_Call) Return(_a0 error) *RoleRepository_InitSystemRoles_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RoleRepository_InitSystemRoles_Call) RunAndReturn(run func(context.Context) error) *RoleRepository_InitSystemRoles_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx, name, status, page, size
func (_m *RoleRepository) List(ctx context.Context, name string, status int, page int, size int) ([]*entity.Role, int64, error) {
	ret := _m.Called(ctx, name, status, page, size)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []*entity.Role
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int, int) ([]*entity.Role, int64, error)); ok {
		return rf(ctx, name, status, page, size)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int, int) []*entity.Role); ok {
		r0 = rf(ctx, name, status, page, size)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Role)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int, int, int) int64); ok {
		r1 = rf(ctx, name, status, page, size)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, int, int, int) error); ok {
		r2 = rf(ctx, name, status, page, size)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// RoleRepository_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type RoleRepository_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - status int
//   - page int
//   - size int
func (_e *RoleRepository_Expecter) List(ctx interface{}, name interface{}, status interface{}, page interface{}, size interface{}) *RoleRepository_List_Call {
	return &RoleRepository_List_Call{Call: _e.mock.On("List", ctx, name, status, page, size)}
}

func (_c *RoleRepository_List_Call) Run(run func(ctx context.Context, name string, status int, page int, size int)) *RoleRepository_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int), args[3].(int), args[4].(int))
	})
	return _c
}

func (_c *RoleRepository_List_Call) Return(_a0 []*entity.Role, _a1 int64, _a2 error) *RoleRepository_List_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *RoleRepository_List_Call) RunAndReturn(run func(context.Context, string, int, int, int) ([]*entity.Role, int64, error)) *RoleRepository_List_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, role
func (_m *RoleRepository) Update(ctx context.Context, role *entity.Role) error {
	ret := _m.Called(ctx, role)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Role) error); ok {
		r0 = rf(ctx, role)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RoleRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type RoleRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - role *entity.Role
func (_e *RoleRepository_Expecter) Update(ctx interface{}, role interface{}) *RoleRepository_Update_Call {
	return &RoleRepository_Update_Call{Call: _e.mock.On("Update", ctx, role)}
}

func (_c *RoleRepository_Update_Call) Run(run func(ctx context.Context, role *entity.Role)) *RoleRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entity.Role))
	})
	return _c
}

func (_c *RoleRepository_Update_Call) Return(_a0 error) *RoleRepository_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RoleRepository_Update_Call) RunAndReturn(run func(context.Context, *entity.Role) error) *RoleRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewRoleRepository creates a new instance of RoleRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRoleRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *RoleRepository {
	mock := &RoleRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
