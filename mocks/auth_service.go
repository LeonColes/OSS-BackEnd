// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"
	dto "oss-backend/internal/model/dto"
	entity "oss-backend/internal/model/entity"

	mock "github.com/stretchr/testify/mock"
)

// AuthService is an autogenerated mock type for the AuthService type
type AuthService struct {
	mock.Mock
}

// AddRoleForUser provides a mock function with given fields: ctx, userID, role, domain
func (_m *AuthService) AddRoleForUser(ctx context.Context, userID string, role string, domain string) error {
	ret := _m.Called(ctx, userID, role, domain)

	if len(ret) == 0 {
		panic("no return value specified for AddRoleForUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, userID, role, domain)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AssignRolesToUser provides a mock function with given fields: ctx, userID, roleIDs, domain
func (_m *AuthService) AssignRolesToUser(ctx context.Context, userID string, roleIDs []uint, domain string) error {
	ret := _m.Called(ctx, userID, roleIDs, domain)

	if len(ret) == 0 {
		panic("no return value specified for AssignRolesToUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []uint, string) error); ok {
		r0 = rf(ctx, userID, roleIDs, domain)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CanUserAccessResource provides a mock function with given fields: ctx, userID, resourceType, action, domain
func (_m *AuthService) CanUserAccessResource(ctx context.Context, userID string, resourceType string, action string, domain string) (bool, error) {
	ret := _m.Called(ctx, userID, resourceType, action, domain)

	if len(ret) == 0 {
		panic("no return value specified for CanUserAccessResource")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) (bool, error)); ok {
		return rf(ctx, userID, resourceType, action, domain)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) bool); ok {
		r0 = rf(ctx, userID, resourceType, action, domain)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, string) error); ok {
		r1 = rf(ctx, userID, resourceType, action, domain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckPermission provides a mock function with given fields: sub, domain, obj, act
func (_m *AuthService) CheckPermission(sub string, domain string, obj string, act string) (bool, error) {
	ret := _m.Called(sub, domain, obj, act)

	if len(ret) == 0 {
		panic("no return value specified for CheckPermission")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string, string) (bool, error)); ok {
		return rf(sub, domain, obj, act)
	}
	if rf, ok := ret.Get(0).(func(string, string, string, string) bool); ok {
		r0 = rf(sub, domain, obj, act)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string, string, string, string) error); ok {
		r1 = rf(sub, domain, obj, act)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateRole provides a mock function with given fields: ctx, role
func (_m *AuthService) CreateRole(ctx context.Context, role *entity.Role) error {
	ret := _m.Called(ctx, role)

	if len(ret) == 0 {
		panic("no return value specified for CreateRole")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Role) error); ok {
		r0 = rf(ctx, role)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateRoleFromDTO provides a mock function with given fields: ctx, req, createdBy
func (_m *AuthService) CreateRoleFromDTO(ctx context.Context, req *dto.RoleCreateRequest, createdBy string) error {
	ret := _m.Called(ctx, req, createdBy)

	if len(ret) == 0 {
		panic("no return value specified for CreateRoleFromDTO")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.RoleCreateRequest, string) error); ok {
		r0 = rf(ctx, req, createdBy)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteRole provides a mock function with given fields: ctx, id
func (_m *AuthService) DeleteRole(ctx context.Context, id uint) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRole")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllRoles provides a mock function with given fields: ctx
func (_m *AuthService) GetAllRoles(ctx context.Context) ([]entity.Role, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllRoles")
	}

	var r0 []entity.Role
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]entity.Role, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []entity.Role); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Role)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRoleByCode provides a mock function with given fields: ctx, code
func (_m *AuthService) GetRoleByCode(ctx context.Context, code string) (*entity.Role, error) {
	ret := _m.Called(ctx, code)

	if len(ret) == 0 {
		panic("no return value specified for GetRoleByCode")
	}

	var r0 *entity.Role
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*entity.Role, error)); ok {
		return rf(ctx, code)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *entity.Role); ok {
		r0 = rf(ctx, code)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Role)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, code)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRoleByID provides a mock function with given fields: ctx, id
func (_m *AuthService) GetRoleByID(ctx context.Context, id uint) (*entity.Role, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetRoleByID")
	}

	var r0 *entity.Role
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) (*entity.Role, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint) *entity.Role); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Role)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRolesForUser provides a mock function with given fields: subject, domain
func (_m *AuthService) GetRolesForUser(subject string, domain string) ([]string, error) {
	ret := _m.Called(subject, domain)

	if len(ret) == 0 {
		panic("no return value specified for GetRolesForUser")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) ([]string, error)); ok {
		return rf(subject, domain)
	}
	if rf, ok := ret.Get(0).(func(string, string) []string); ok {
		r0 = rf(subject, domain)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(subject, domain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserRoles provides a mock function with given fields: ctx, userID
func (_m *AuthService) GetUserRoles(ctx context.Context, userID string) ([]entity.Role, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserRoles")
	}

	var r0 []entity.Role
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]entity.Role, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []entity.Role); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Role)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InitializeRBAC provides a mock function with no fields
func (_m *AuthService) InitializeRBAC() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for InitializeRBAC")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IsUserInRole provides a mock function with given fields: ctx, userID, roleCode, domain
func (_m *AuthService) IsUserInRole(ctx context.Context, userID string, roleCode string, domain string) (bool, error) {
	ret := _m.Called(ctx, userID, roleCode, domain)

	if len(ret) == 0 {
		panic("no return value specified for IsUserInRole")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (bool, error)); ok {
		return rf(ctx, userID, roleCode, domain)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) bool); ok {
		r0 = rf(ctx, userID, roleCode, domain)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, userID, roleCode, domain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRoles provides a mock function with given fields: ctx, req
func (_m *AuthService) ListRoles(ctx context.Context, req *dto.RoleListRequest) (*dto.RoleListResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for ListRoles")
	}

	var r0 *dto.RoleListResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.RoleListRequest) (*dto.RoleListResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dto.RoleListRequest) *dto.RoleListResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.RoleListResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dto.RoleListRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveRoleForUser provides a mock function with given fields: ctx, userID, role, domain
func (_m *AuthService) RemoveRoleForUser(ctx context.Context, userID string, role string, domain string) error {
	ret := _m.Called(ctx, userID, role, domain)

	if len(ret) == 0 {
		panic("no return value specified for RemoveRoleForUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, userID, role, domain)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveRolesFromUser provides a mock function with given fields: ctx, userID, roleIDs, domain
func (_m *AuthService) RemoveRolesFromUser(ctx context.Context, userID string, roleIDs []uint, domain string) error {
	ret := _m.Called(ctx, userID, roleIDs, domain)

	if len(ret) == 0 {
		panic("no return value specified for RemoveRolesFromUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []uint, string) error); ok {
		r0 = rf(ctx, userID, roleIDs, domain)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateRole provides a mock function with given fields: ctx, role
func (_m *AuthService) UpdateRole(ctx context.Context, role *entity.Role) error {
	ret := _m.Called(ctx, role)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRole")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Role) error); ok {
		r0 = rf(ctx, role)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateRoleFromDTO provides a mock function with given fields: ctx, req, updatedBy
func (_m *AuthService) UpdateRoleFromDTO(ctx context.Context, req *dto.RoleUpdateRequest, updatedBy string) error {
	ret := _m.Called(ctx, req, updatedBy)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRoleFromDTO")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.RoleUpdateRequest, string) error); ok {
		r0 = rf(ctx, req, updatedBy)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewAuthService creates a new instance of AuthService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuthService(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuthService {
	mock := &AuthService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
