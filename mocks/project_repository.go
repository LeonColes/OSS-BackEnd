// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"
	dto "oss-backend/internal/model/dto"
	entity "oss-backend/internal/model/entity"

	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"

	repository "oss-backend/internal/repository"
)

// ProjectRepository is an autogenerated mock type for the ProjectRepository type
type ProjectRepository struct {
	mock.Mock
}

// AddProjectPermission provides a mock function with given fields: ctx, permission
func (_m *ProjectRepository) AddProjectPermission(ctx context.Context, permission *entity.Permission) error {
	ret := _m.Called(ctx, permission)

	if len(ret) == 0 {
		panic("no return value specified for AddProjectPermission")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Permission) error); ok {
		r0 = rf(ctx, permission)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CheckUserInProject provides a mock function with given fields: ctx, userID, projectID
func (_m *ProjectRepository) CheckUserInProject(ctx context.Context, userID string, projectID string) (bool, error) {
	ret := _m.Called(ctx, userID, projectID)

	if len(ret) == 0 {
		panic("no return value specified for CheckUserInProject")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (bool, error)); ok {
		return rf(ctx, userID, projectID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) bool); ok {
		r0 = rf(ctx, userID, projectID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, userID, projectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckUserProjectRole provides a mock function with given fields: ctx, userID, projectID, role
func (_m *ProjectRepository) CheckUserProjectRole(ctx context.Context, userID string, projectID string, role string) (bool, error) {
	ret := _m.Called(ctx, userID, projectID, role)

	if len(ret) == 0 {
		panic("no return value specified for CheckUserProjectRole")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (bool, error)); ok {
		return rf(ctx, userID, projectID, role)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) bool); ok {
		r0 = rf(ctx, userID, projectID, role)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, userID, projectID, role)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Create provides a mock function with given fields: ctx, project
func (_m *ProjectRepository) Create(ctx context.Context, project *entity.Project) error {
	ret := _m.Called(ctx, project)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Project) error); ok {
		r0 = rf(ctx, project)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateProjectMember provides a mock function with given fields: ctx, member
func (_m *ProjectRepository) CreateProjectMember(ctx context.Context, member *entity.ProjectMember) error {
	ret := _m.Called(ctx, member)

	if len(ret) == 0 {
		panic("no return value specified for CreateProjectMember")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.ProjectMember) error); ok {
		r0 = rf(ctx, member)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, id
func (_m *ProjectRepository) Delete(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByGroupID provides a mock function with given fields: ctx, groupID
func (_m *ProjectRepository) GetByGroupID(ctx context.Context, groupID string) ([]entity.Project, error) {
	ret := _m.Called(ctx, groupID)

	if len(ret) == 0 {
		panic("no return value specified for GetByGroupID")
	}

	var r0 []entity.Project
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]entity.Project, error)); ok {
		return rf(ctx, groupID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []entity.Project); ok {
		r0 = rf(ctx, groupID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Project)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, groupID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *ProjectRepository) GetByID(ctx context.Context, id string) (*entity.Project, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *entity.Project
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*entity.Project, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *entity.Project); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Project)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProjectMember provides a mock function with given fields: ctx, projectID, userID
func (_m *ProjectRepository) GetProjectMember(ctx context.Context, projectID string, userID string) (*entity.ProjectMember, error) {
	ret := _m.Called(ctx, projectID, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetProjectMember")
	}

	var r0 *entity.ProjectMember
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*entity.ProjectMember, error)); ok {
		return rf(ctx, projectID, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *entity.ProjectMember); ok {
		r0 = rf(ctx, projectID, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.ProjectMember)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, projectID, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProjectPermission provides a mock function with given fields: ctx, projectID, userID
func (_m *ProjectRepository) GetProjectPermission(ctx context.Context, projectID string, userID string) (*entity.Permission, error) {
	ret := _m.Called(ctx, projectID, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetProjectPermission")
	}

	var r0 *entity.Permission
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*entity.Permission, error)); ok {
		return rf(ctx, projectID, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *entity.Permission); ok {
		r0 = rf(ctx, projectID, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Permission)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, projectID, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserProjects provides a mock function with given fields: ctx, userID
func (_m *ProjectRepository) GetUserProjects(ctx context.Context, userID string) ([]entity.Project, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserProjects")
	}

	var r0 []entity.Project
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]entity.Project, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []entity.Project); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Project)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: ctx, req
func (_m *ProjectRepository) List(ctx context.Context, req *dto.ProjectListRequest) ([]entity.Project, int64, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []entity.Project
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.ProjectListRequest) ([]entity.Project, int64, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dto.ProjectListRequest) []entity.Project); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Project)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dto.ProjectListRequest) int64); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(context.Context, *dto.ProjectListRequest) error); ok {
		r2 = rf(ctx, req)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ListProjectMembers provides a mock function with given fields: ctx, projectID, page, size
func (_m *ProjectRepository) ListProjectMembers(ctx context.Context, projectID string, page int, size int) ([]entity.ProjectMember, int64, error) {
	ret := _m.Called(ctx, projectID, page, size)

	if len(ret) == 0 {
		panic("no return value specified for ListProjectMembers")
	}

	var r0 []entity.ProjectMember
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) ([]entity.ProjectMember, int64, error)); ok {
		return rf(ctx, projectID, page, size)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) []entity.ProjectMember); ok {
		r0 = rf(ctx, projectID, page, size)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.ProjectMember)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int, int) int64); ok {
		r1 = rf(ctx, projectID, page, size)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, int, int) error); ok {
		r2 = rf(ctx, projectID, page, size)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ListProjectPermissions provides a mock function with given fields: ctx, projectID, page, size
func (_m *ProjectRepository) ListProjectPermissions(ctx context.Context, projectID string, page int, size int) ([]entity.Permission, int64, error) {
	ret := _m.Called(ctx, projectID, page, size)

	if len(ret) == 0 {
		panic("no return value specified for ListProjectPermissions")
	}

	var r0 []entity.Permission
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) ([]entity.Permission, int64, error)); ok {
		return rf(ctx, projectID, page, size)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) []entity.Permission); ok {
		r0 = rf(ctx, projectID, page, size)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Permission)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int, int) int64); ok {
		r1 = rf(ctx, projectID, page, size)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, int, int) error); ok {
		r2 = rf(ctx, projectID, page, size)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// RemoveProjectMember provides a mock function with given fields: ctx, projectID, userID
func (_m *ProjectRepository) RemoveProjectMember(ctx context.Context, projectID string, userID string) error {
	ret := _m.Called(ctx, projectID, userID)

	if len(ret) == 0 {
		panic("no return value specified for RemoveProjectMember")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, projectID, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveProjectPermission provides a mock function with given fields: ctx, projectID, userID
func (_m *ProjectRepository) RemoveProjectPermission(ctx context.Context, projectID string, userID string) error {
	ret := _m.Called(ctx, projectID, userID)

	if len(ret) == 0 {
		panic("no return value specified for RemoveProjectPermission")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, projectID, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: ctx, project
func (_m *ProjectRepository) Update(ctx context.Context, project *entity.Project) error {
	ret := _m.Called(ctx, project)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Project) error); ok {
		r0 = rf(ctx, project)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateProjectMember provides a mock function with given fields: ctx, member
func (_m *ProjectRepository) UpdateProjectMember(ctx context.Context, member *entity.ProjectMember) error {
	ret := _m.Called(ctx, member)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProjectMember")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.ProjectMember) error); ok {
		r0 = rf(ctx, member)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateProjectPermission provides a mock function with given fields: ctx, permission
func (_m *ProjectRepository) UpdateProjectPermission(ctx context.Context, permission *entity.Permission) error {
	ret := _m.Called(ctx, permission)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProjectPermission")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Permission) error); ok {
		r0 = rf(ctx, permission)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WithTx provides a mock function with given fields: tx
func (_m *ProjectRepository) WithTx(tx *gorm.DB) repository.ProjectRepository {
	ret := _m.Called(tx)

	if len(ret) == 0 {
		panic("no return value specified for WithTx")
	}

	var r0 repository.ProjectRepository
	if rf, ok := ret.Get(0).(func(*gorm.DB) repository.ProjectRepository); ok {
		r0 = rf(tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(repository.ProjectRepository)
		}
	}

	return r0
}

// NewProjectRepository creates a new instance of ProjectRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProjectRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProjectRepository {
	mock := &ProjectRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
