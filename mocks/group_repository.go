// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"
	dto "oss-backend/internal/model/dto"
	entity "oss-backend/internal/model/entity"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// GroupRepository is an autogenerated mock type for the GroupRepository type
type GroupRepository struct {
	mock.Mock
}

// AddMember provides a mock function with given fields: ctx, member
func (_m *GroupRepository) AddMember(ctx context.Context, member *entity.GroupMember) error {
	ret := _m.Called(ctx, member)

	if len(ret) == 0 {
		panic("no return value specified for AddMember")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.GroupMember) error); ok {
		r0 = rf(ctx, member)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CheckUserGroupRole provides a mock function with given fields: ctx, userID, groupID, role
func (_m *GroupRepository) CheckUserGroupRole(ctx context.Context, userID string, groupID string, role string) (bool, error) {
	ret := _m.Called(ctx, userID, groupID, role)

	if len(ret) == 0 {
		panic("no return value specified for CheckUserGroupRole")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (bool, error)); ok {
		return rf(ctx, userID, groupID, role)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) bool); ok {
		r0 = rf(ctx, userID, groupID, role)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, userID, groupID, role)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckUserInGroup provides a mock function with given fields: ctx, userID, groupID
func (_m *GroupRepository) CheckUserInGroup(ctx context.Context, userID string, groupID string) (bool, error) {
	ret := _m.Called(ctx, userID, groupID)

	if len(ret) == 0 {
		panic("no return value specified for CheckUserInGroup")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (bool, error)); ok {
		return rf(ctx, userID, groupID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) bool); ok {
		r0 = rf(ctx, userID, groupID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, userID, groupID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateGroup provides a mock function with given fields: ctx, group
func (_m *GroupRepository) CreateGroup(ctx context.Context, group *entity.Group) error {
	ret := _m.Called(ctx, group)

	if len(ret) == 0 {
		panic("no return value specified for CreateGroup")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Group) error); ok {
		r0 = rf(ctx, group)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GenerateInviteCode provides a mock function with given fields: ctx, groupID, expireDays
func (_m *GroupRepository) GenerateInviteCode(ctx context.Context, groupID string, expireDays int) (string, time.Time, error) {
	ret := _m.Called(ctx, groupID, expireDays)

	if len(ret) == 0 {
		panic("no return value specified for GenerateInviteCode")
	}

	var r0 string
	var r1 time.Time
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int) (string, time.Time, error)); ok {
		return rf(ctx, groupID, expireDays)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int) string); ok {
		r0 = rf(ctx, groupID, expireDays)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int) time.Time); ok {
		r1 = rf(ctx, groupID, expireDays)
	} else {
		r1 = ret.Get(1).(time.Time)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, int) error); ok {
		r2 = rf(ctx, groupID, expireDays)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetGroupByID provides a mock function with given fields: ctx, id
func (_m *GroupRepository) GetGroupByID(ctx context.Context, id string) (*entity.Group, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetGroupByID")
	}

	var r0 *entity.Group
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*entity.Group, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *entity.Group); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Group)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGroupByInviteCode provides a mock function with given fields: ctx, code
func (_m *GroupRepository) GetGroupByInviteCode(ctx context.Context, code string) (*entity.Group, error) {
	ret := _m.Called(ctx, code)

	if len(ret) == 0 {
		panic("no return value specified for GetGroupByInviteCode")
	}

	var r0 *entity.Group
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*entity.Group, error)); ok {
		return rf(ctx, code)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *entity.Group); ok {
		r0 = rf(ctx, code)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Group)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, code)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGroupByKey provides a mock function with given fields: ctx, key
func (_m *GroupRepository) GetGroupByKey(ctx context.Context, key string) (*entity.Group, error) {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for GetGroupByKey")
	}

	var r0 *entity.Group
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*entity.Group, error)); ok {
		return rf(ctx, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *entity.Group); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Group)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMember provides a mock function with given fields: ctx, groupID, userID
func (_m *GroupRepository) GetMember(ctx context.Context, groupID string, userID string) (*entity.GroupMember, error) {
	ret := _m.Called(ctx, groupID, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetMember")
	}

	var r0 *entity.GroupMember
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*entity.GroupMember, error)); ok {
		return rf(ctx, groupID, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *entity.GroupMember); ok {
		r0 = rf(ctx, groupID, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.GroupMember)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, groupID, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMemberCount provides a mock function with given fields: ctx, groupID
func (_m *GroupRepository) GetMemberCount(ctx context.Context, groupID string) (int, error) {
	ret := _m.Called(ctx, groupID)

	if len(ret) == 0 {
		panic("no return value specified for GetMemberCount")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (int, error)); ok {
		return rf(ctx, groupID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) int); ok {
		r0 = rf(ctx, groupID)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, groupID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProjectCount provides a mock function with given fields: ctx, groupID
func (_m *GroupRepository) GetProjectCount(ctx context.Context, groupID string) (int, error) {
	ret := _m.Called(ctx, groupID)

	if len(ret) == 0 {
		panic("no return value specified for GetProjectCount")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (int, error)); ok {
		return rf(ctx, groupID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) int); ok {
		r0 = rf(ctx, groupID)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, groupID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStorageUsed provides a mock function with given fields: ctx, groupID
func (_m *GroupRepository) GetStorageUsed(ctx context.Context, groupID string) (int64, error) {
	ret := _m.Called(ctx, groupID)

	if len(ret) == 0 {
		panic("no return value specified for GetStorageUsed")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (int64, error)); ok {
		return rf(ctx, groupID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) int64); ok {
		r0 = rf(ctx, groupID)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, groupID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserGroups provides a mock function with given fields: ctx, userID
func (_m *GroupRepository) GetUserGroups(ctx context.Context, userID string) ([]entity.Group, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserGroups")
	}

	var r0 []entity.Group
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]entity.Group, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []entity.Group); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Group)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListGroups provides a mock function with given fields: ctx, req
func (_m *GroupRepository) ListGroups(ctx context.Context, req *dto.GroupListRequest) ([]entity.Group, int64, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for ListGroups")
	}

	var r0 []entity.Group
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.GroupListRequest) ([]entity.Group, int64, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dto.GroupListRequest) []entity.Group); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Group)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dto.GroupListRequest) int64); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(context.Context, *dto.GroupListRequest) error); ok {
		r2 = rf(ctx, req)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ListMembers provides a mock function with given fields: ctx, groupID, page, size
func (_m *GroupRepository) ListMembers(ctx context.Context, groupID string, page int, size int) ([]entity.GroupMember, int64, error) {
	ret := _m.Called(ctx, groupID, page, size)

	if len(ret) == 0 {
		panic("no return value specified for ListMembers")
	}

	var r0 []entity.GroupMember
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) ([]entity.GroupMember, int64, error)); ok {
		return rf(ctx, groupID, page, size)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) []entity.GroupMember); ok {
		r0 = rf(ctx, groupID, page, size)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.GroupMember)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int, int) int64); ok {
		r1 = rf(ctx, groupID, page, size)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, int, int) error); ok {
		r2 = rf(ctx, groupID, page, size)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// RemoveMember provides a mock function with given fields: ctx, groupID, userID
func (_m *GroupRepository) RemoveMember(ctx context.Context, groupID string, userID string) error {
	ret := _m.Called(ctx, groupID, userID)

	if len(ret) == 0 {
		panic("no return value specified for RemoveMember")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, groupID, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateGroup provides a mock function with given fields: ctx, group
func (_m *GroupRepository) UpdateGroup(ctx context.Context, group *entity.Group) error {
	ret := _m.Called(ctx, group)

	if len(ret) == 0 {
		panic("no return value specified for UpdateGroup")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Group) error); ok {
		r0 = rf(ctx, group)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateGroupInviteCode provides a mock function with given fields: ctx, groupID, code, expireAt
func (_m *GroupRepository) UpdateGroupInviteCode(ctx context.Context, groupID string, code string, expireAt *time.Time) error {
	ret := _m.Called(ctx, groupID, code, expireAt)

	if len(ret) == 0 {
		panic("no return value specified for UpdateGroupInviteCode")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *time.Time) error); ok {
		r0 = rf(ctx, groupID, code, expireAt)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateMember provides a mock function with given fields: ctx, member
func (_m *GroupRepository) UpdateMember(ctx context.Context, member *entity.GroupMember) error {
	ret := _m.Called(ctx, member)

	if len(ret) == 0 {
		panic("no return value specified for UpdateMember")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.GroupMember) error); ok {
		r0 = rf(ctx, member)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewGroupRepository creates a new instance of GroupRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGroupRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *GroupRepository {
	mock := &GroupRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
