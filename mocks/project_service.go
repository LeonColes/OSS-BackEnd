// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"
	dto "oss-backend/internal/model/dto"

	mock "github.com/stretchr/testify/mock"
)

// ProjectService is an autogenerated mock type for the ProjectService type
type ProjectService struct {
	mock.Mock
}

// CheckUserProjectAccess provides a mock function with given fields: ctx, userID, projectID, requiredRoles
func (_m *ProjectService) CheckUserProjectAccess(ctx context.Context, userID string, projectID string, requiredRoles []string) (bool, error) {
	ret := _m.Called(ctx, userID, projectID, requiredRoles)

	if len(ret) == 0 {
		panic("no return value specified for CheckUserProjectAccess")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, []string) (bool, error)); ok {
		return rf(ctx, userID, projectID, requiredRoles)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, []string) bool); ok {
		r0 = rf(ctx, userID, projectID, requiredRoles)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, []string) error); ok {
		r1 = rf(ctx, userID, projectID, requiredRoles)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateProject provides a mock function with given fields: ctx, req, creatorID
func (_m *ProjectService) CreateProject(ctx context.Context, req *dto.CreateProjectRequest, creatorID string) (*dto.ProjectResponse, error) {
	ret := _m.Called(ctx, req, creatorID)

	if len(ret) == 0 {
		panic("no return value specified for CreateProject")
	}

	var r0 *dto.ProjectResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.CreateProjectRequest, string) (*dto.ProjectResponse, error)); ok {
		return rf(ctx, req, creatorID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dto.CreateProjectRequest, string) *dto.ProjectResponse); ok {
		r0 = rf(ctx, req, creatorID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.ProjectResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dto.CreateProjectRequest, string) error); ok {
		r1 = rf(ctx, req, creatorID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteProject provides a mock function with given fields: ctx, id, userID
func (_m *ProjectService) DeleteProject(ctx context.Context, id string, userID string) error {
	ret := _m.Called(ctx, id, userID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProject")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, id, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetProjectByID provides a mock function with given fields: ctx, id, userID
func (_m *ProjectService) GetProjectByID(ctx context.Context, id string, userID string) (*dto.ProjectResponse, error) {
	ret := _m.Called(ctx, id, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetProjectByID")
	}

	var r0 *dto.ProjectResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*dto.ProjectResponse, error)); ok {
		return rf(ctx, id, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *dto.ProjectResponse); ok {
		r0 = rf(ctx, id, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.ProjectResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, id, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserProjects provides a mock function with given fields: ctx, query, userID
func (_m *ProjectService) GetUserProjects(ctx context.Context, query *dto.ProjectQuery, userID string) ([]*dto.ProjectResponse, int64, error) {
	ret := _m.Called(ctx, query, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserProjects")
	}

	var r0 []*dto.ProjectResponse
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.ProjectQuery, string) ([]*dto.ProjectResponse, int64, error)); ok {
		return rf(ctx, query, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dto.ProjectQuery, string) []*dto.ProjectResponse); ok {
		r0 = rf(ctx, query, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*dto.ProjectResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dto.ProjectQuery, string) int64); ok {
		r1 = rf(ctx, query, userID)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(context.Context, *dto.ProjectQuery, string) error); ok {
		r2 = rf(ctx, query, userID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ListProjectUsers provides a mock function with given fields: ctx, projectID, userID
func (_m *ProjectService) ListProjectUsers(ctx context.Context, projectID string, userID string) ([]*dto.ProjectUserResponse, error) {
	ret := _m.Called(ctx, projectID, userID)

	if len(ret) == 0 {
		panic("no return value specified for ListProjectUsers")
	}

	var r0 []*dto.ProjectUserResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) ([]*dto.ProjectUserResponse, error)); ok {
		return rf(ctx, projectID, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []*dto.ProjectUserResponse); ok {
		r0 = rf(ctx, projectID, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*dto.ProjectUserResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, projectID, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListProjects provides a mock function with given fields: ctx, query, userID
func (_m *ProjectService) ListProjects(ctx context.Context, query *dto.ProjectQuery, userID string) ([]*dto.ProjectResponse, int64, error) {
	ret := _m.Called(ctx, query, userID)

	if len(ret) == 0 {
		panic("no return value specified for ListProjects")
	}

	var r0 []*dto.ProjectResponse
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.ProjectQuery, string) ([]*dto.ProjectResponse, int64, error)); ok {
		return rf(ctx, query, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dto.ProjectQuery, string) []*dto.ProjectResponse); ok {
		r0 = rf(ctx, query, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*dto.ProjectResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dto.ProjectQuery, string) int64); ok {
		r1 = rf(ctx, query, userID)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(context.Context, *dto.ProjectQuery, string) error); ok {
		r2 = rf(ctx, query, userID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// RemovePermission provides a mock function with given fields: ctx, req, userID
func (_m *ProjectService) RemovePermission(ctx context.Context, req *dto.RemovePermissionRequest, userID string) error {
	ret := _m.Called(ctx, req, userID)

	if len(ret) == 0 {
		panic("no return value specified for RemovePermission")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.RemovePermissionRequest, string) error); ok {
		r0 = rf(ctx, req, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetPermission provides a mock function with given fields: ctx, req, granterID
func (_m *ProjectService) SetPermission(ctx context.Context, req *dto.SetPermissionRequest, granterID string) error {
	ret := _m.Called(ctx, req, granterID)

	if len(ret) == 0 {
		panic("no return value specified for SetPermission")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.SetPermissionRequest, string) error); ok {
		r0 = rf(ctx, req, granterID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateProject provides a mock function with given fields: ctx, req, userID
func (_m *ProjectService) UpdateProject(ctx context.Context, req *dto.UpdateProjectRequest, userID string) (*dto.ProjectResponse, error) {
	ret := _m.Called(ctx, req, userID)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProject")
	}

	var r0 *dto.ProjectResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.UpdateProjectRequest, string) (*dto.ProjectResponse, error)); ok {
		return rf(ctx, req, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dto.UpdateProjectRequest, string) *dto.ProjectResponse); ok {
		r0 = rf(ctx, req, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.ProjectResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dto.UpdateProjectRequest, string) error); ok {
		r1 = rf(ctx, req, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewProjectService creates a new instance of ProjectService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProjectService(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProjectService {
	mock := &ProjectService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
