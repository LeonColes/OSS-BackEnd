// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"
	entity "oss-backend/internal/model/entity"

	mock "github.com/stretchr/testify/mock"
)

// UserRepository is an autogenerated mock type for the UserRepository type
type UserRepository struct {
	mock.Mock
}

// AssignRoles provides a mock function with given fields: ctx, userID, roleIDs
func (_m *UserRepository) AssignRoles(ctx context.Context, userID string, roleIDs []uint) error {
	ret := _m.Called(ctx, userID, roleIDs)

	if len(ret) == 0 {
		panic("no return value specified for AssignRoles")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []uint) error); ok {
		r0 = rf(ctx, userID, roleIDs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Create provides a mock function with given fields: ctx, user
func (_m *UserRepository) Create(ctx context.Context, user *entity.User) error {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.User) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByEmail provides a mock function with given fields: ctx, email
func (_m *UserRepository) GetByEmail(ctx context.Context, email string) (*entity.User, error) {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for GetByEmail")
	}

	var r0 *entity.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*entity.User, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *entity.User); ok {
		r0 = rf(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *UserRepository) GetByID(ctx context.Context, id string) (*entity.User, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *entity.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*entity.User, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *entity.User); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserRoles provides a mock function with given fields: ctx, userID
func (_m *UserRepository) GetUserRoles(ctx context.Context, userID string) ([]entity.Role, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserRoles")
	}

	var r0 []entity.Role
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]entity.Role, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []entity.Role); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Role)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: ctx, email, name, status, page, size
func (_m *UserRepository) List(ctx context.Context, email string, name string, status int, page int, size int) ([]*entity.User, int64, error) {
	ret := _m.Called(ctx, email, name, status, page, size)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []*entity.User
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int, int, int) ([]*entity.User, int64, error)); ok {
		return rf(ctx, email, name, status, page, size)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int, int, int) []*entity.User); ok {
		r0 = rf(ctx, email, name, status, page, size)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, int, int, int) int64); ok {
		r1 = rf(ctx, email, name, status, page, size)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, string, int, int, int) error); ok {
		r2 = rf(ctx, email, name, status, page, size)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// RemoveRoles provides a mock function with given fields: ctx, userID, roleIDs
func (_m *UserRepository) RemoveRoles(ctx context.Context, userID string, roleIDs []uint) error {
	ret := _m.Called(ctx, userID, roleIDs)

	if len(ret) == 0 {
		panic("no return value specified for RemoveRoles")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []uint) error); ok {
		r0 = rf(ctx, userID, roleIDs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: ctx, user
func (_m *UserRepository) Update(ctx context.Context, user *entity.User) error {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.User) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateLastLogin provides a mock function with given fields: ctx, id, ip
func (_m *UserRepository) UpdateLastLogin(ctx context.Context, id string, ip string) error {
	ret := _m.Called(ctx, id, ip)

	if len(ret) == 0 {
		panic("no return value specified for UpdateLastLogin")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, id, ip)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdatePassword provides a mock function with given fields: ctx, id, passwordHash
func (_m *UserRepository) UpdatePassword(ctx context.Context, id string, passwordHash string) error {
	ret := _m.Called(ctx, id, passwordHash)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePassword")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, id, passwordHash)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateStatus provides a mock function with given fields: ctx, id, status
func (_m *UserRepository) UpdateStatus(ctx context.Context, id string, status int) error {
	ret := _m.Called(ctx, id, status)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int) error); ok {
		r0 = rf(ctx, id, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewUserRepository creates a new instance of UserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserRepository {
	mock := &UserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
